
//支持针对Time列的等值FULL OUTER JOIN
// 返回左表和右表所有记录
// 某个表中的记录没有与另外一个表中的记录匹配，返回null值

connect root/TimechoDB@2021;
--0.清理数据：
drop database test_db;
<<NULL;

--1. 创建数据库
create database test_db;

--2. 指定数据库
use test_db;

--3. 创建表
create table students
(
    region STRING TAG,
	student_id INT32 FIELD,
	name STRING FIELD,
	genders text FIELD,
    date_of_birth DATE FIELD 
);

create table teachers
(
    region STRING TAG,
	teacher_id INT32 FIELD,
    course_id INT32 FIELD,
    age INT32 FIELD
);

create table courses
(
    course_region STRING TAG,
    course_id INT32 FIELD,
    course_name STRING FIELD,
    teacher_id INT32 FIELD
);

create table grades
(
    grade_id STRING TAG,
	course_id INT32 FIELD,
	student_id INT32 FIELD,
	score INT32 FIELD
);

--4. 查看表
show tables;

--5. 展示表结构信息
desc students;
desc teachers;
desc courses;
desc grades;

--6. 分别插入数据
insert into students(time,region,student_id,name,genders,date_of_birth) values
(1,'haidian',1,'Lucy','女','2015-10-10'),
(2,'haidian',2,'Jack','男','2015-09-24'),
(3,'chaoyang',3,'Sam','男','2014-07-20'),
(4,'chaoyang',4,'Lily','女','2015-03-28'),
(5,'xicheng',5,'Helen','女','2016-01-22'),
(6,'changping',6,'Nancy','女','2017-12-20'),
(7,'changping',7,'Mike','男','2016-11-22'),
(8,'shunyi',8,'Bob','男','2016-05-12');

insert into teachers(time,region,teacher_id,course_id,age) values
(1,'haidian',1001,10000001,25),
(2,'haidian',1002,10000002,26),
(3,'chaoyang',1003,10000003,28),
(4,'chaoyang',1004,10000004,27),
(5,'xicheng',1005,10000005,26);

insert into courses(time,course_region,course_id,course_name,teacher_id) values
(1,'Math',10000001,'数学',1001),
(2,'CHIN',10000002,'语文',1002),
(3,'ENG',10000003,'英语',1003),
(4,'PE',10000004,'体育',1004),
(5,'HIST',10000005,'历史',1005);

insert into grades(time,grade_id,course_id,student_id,score) values
(1,1111,10000001,1,99),
(2,1112,10000002,2,90),
(3,1113,10000003,3,85),
(4,1114,10000004,4,89),
(5,1115,10000005,5,98),
(6,1113,10000003,6,55),
(7,1114,10000004,7,60),
(8,1115,10000005,8,100),
(9,1114,10000001,2,99),
(10,1115,10000002,1,95);

--7. 分别查询表数据
select * from students order by time;
select * from teachers order by time;
select * from courses order by time;
select * from grades order by time;


--8. ON连接：针对time列的等值表达式连接
select 
	s.name,s.genders,
	g.course_id, g.score
from 
	students s
	FULL JOIN grades g ON s.time=g.time;

select 
	  s.time, s.region, s.name,s.genders,
	  t.teacher_id, t.age,
	  c.course_name,
	  g.score
from  students s
FULL JOIN teachers t ON s.time=t.time
FULL JOIN courses c ON c.time=t.time
FULL JOIN grades g ON g.time=c.time;

select * from students
FULL OUTER JOIN teachers ON students.time = teachers.time
FULL OUTER JOIN courses ON courses.time = teachers.time
FULL OUTER JOIN grades ON grades.time = courses.time order by students.time;

select 
	count(s.region) as region_count,
	count(s.student_id) as student_id_count,
	count(t.teacher_id) as teacher_id_count,
	count(c.course_id) as course_id_count,
	avg(g.score) as avg_score,
	max(g.score) as max_score,
	min(g.score) as min_score
from students s 
FULL JOIN teachers t ON s.time=t.time 
FULL JOIN courses c ON c.time=t.time 
FULL JOIN grades g ON g.time=c.time
group by s.time;

select 
    s.name,
    g.score,
    CASE 
        WHEN g.score >= 90 THEN 'A'
        WHEN g.score >= 80 THEN 'B'
        WHEN g.score >= 70 THEN 'C'
        WHEN g.score >= 60 THEN 'D'
        ELSE 'F'
    END AS grade,
    CASE 
        WHEN g.score >= 60 THEN 'Pass'
        ELSE 'Fail'
    END AS status,
    CASE 
        WHEN g.score >= 85 THEN 'Excellent'
        WHEN g.score >= 70 THEN 'Good'
        WHEN g.score >= 50 THEN 'Average'
        ELSE 'Needs Improvement'
    END AS performance
from 
    students s
FULL OUTER JOIN 
    grades g ON s.time = g.time;

select 
      s.region,
      s.name,
      t.teacher_id,
      c.course_id,
      c.course_name,
      g.score
from students s 
FULL JOIN teachers t ON s.time=t.time 
FULL JOIN courses c ON c.time=t.time 
FULL JOIN grades g ON g.time=c.time
where g.time > 1 and g.time < 4 order by c.course_id;

--9. USING 全连接查询
select * from students
FULL OUTER JOIN
	courses USING(time)
FULL OUTER JOIN
	grades USING(time)
FULL OUTER JOIN
	teachers USING(time);

select
	time,
	s.student_id as stu_id,
	s.name as s_name,
	t.teacher_id as t_id,
	c.course_name as c_cour_name,
	g.score as g_score
from 
	students s
FULL JOIN 
	teachers t USING(time)
FULL JOIN 
	courses c USING(time)
FULL JOIN
	grades g USING(time);

select 
	   s.name,
       t.teacher_id,
       c.course_name,
       g.score
from students s 
FULL JOIN teachers t USING(time)
FULL JOIN courses c USING(time)
FULL JOIN grades g USING(time)
where time > 3 and time <9
and g.score > 85;

select 
	   count(s.student_id) as count_student,
	   count(c.course_id) as count_course,
	   avg(g.score) as avg_score
from students s
FULL JOIN courses c USING(time)
FULL JOIN grades g USING(time);

select 
      s.student_id, s.name,
      t.teacher_id, t.course_id,
      c.course_name,
      g.score
from 
      students s
FULL OUTER JOIN teachers t USING(time)
FULL OUTER JOIN courses c USING(time)
FULL OUTER JOIN grades g USING(time)
order by time, s.student_id, t.teacher_id;

--10. 非 Time 列的等值全连接查询
select * from courses c
FULL OUTER JOIN
	teachers t USING(teacher_id)
FULL OUTER JOIN
	grades g ON c.course_id = g.course_id
order by c.time,t.time,g.time,g.student_id;
	
select s.name,s.genders,s.date_of_birth,
	   t.teacher_id, t.course_id
from students s 
FULL JOIN teachers t USING(region);

select 
     s.name, s.genders, s.date_of_birth,
     t.teacher_id, t.course_id
from
     students s
FULL JOIN teachers t ON s.region = t.region;

select * from students s
FULL JOIN teachers t USING(time)
where 
	s.region = t.region;

--11. 针对任意等值表达式的连接查询
select * from students s, teachers t
where s.time=t.time 
	  and	
	  s.region= t.region;
	  
select * from students s, grades g
where s.time < g.time or s.student_id = g.student_id
order by s.time,s.region,g.time
limit 5 offset 3;
	  
select * from students
FULL OUTER JOIN
	teachers USING(time,region)
order by time;

select c.course_id, count(*) as count_result from courses c, grades g
where c.time < g.time 
and g.grade_id='1115'
group by c.course_id
order by course_id,count_result;

select s.region,count(s.name) as count_name_result,
count(t.teacher_id) as count_teacher_result,
count(g.grade_id) as count_grade_result,
max(g.score)+min(score) as score_total_result
from students s, teachers t, grades g
where s.time < g.time
group by s.region
order by s.region,count_name_result,count_teacher_result,count_grade_result;

select
	s.region as s_region,
	s.name as s_name,
	t.teacher_id as t_teacher_id,
	c.course_id as c_course_id,
	c.course_name as c_course_name,
	g.grade_id as g_grade_id,
	g.score as g_score
from 
	students s
FULL OUTER JOIN 
	teachers t ON s.region = t.region
FULL OUTER JOIN 
	courses c ON s.time= c.time
FULL OUTER JOIN 
	grades g USING (student_id)
where 
	s.time > 1 and s.time < 10
	and
	g.score > 80
order by g.score;


--12. 异常检查
select * from 
	students s
FUll OUTER JOIN 
	grades g ON s.time < g.time and s.student_id = g.student_id;
<<SQLSTATE;

select * from courses c
FULL OUTER join	
	grades g on c.time>g.time OR c.course_id = g.course_id;
<<SQLSTATE;

select c.course_region,count(c.course_id),
count(t.teacher_id),count(t.age),
count(g.student_id),last(g.score)
from courses c
FULL OUTER JOIN 
	teachers t ON c.course_id = t.course_id and c.teacher_id = t.teacher_id
FULL OUTER JOIN 
	grades g ON c.time = min(g.time)
where g.score > 85
group by c.course_region;
<<SQLSTATE;

-- 清理数据： 删除数据库 
drop database test_db;
<<NULL;
