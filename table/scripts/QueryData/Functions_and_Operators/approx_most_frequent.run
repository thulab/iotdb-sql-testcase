// approx_most_frequent(x, k, capacity)：用于近似计算数据集中出现频率最高的前K个元数。
// 返回一个JSON格式的字符串

connect root/TimechoDB@2021;

--0. 清理环境
drop database test_db;
<<NULL;

--1.创建数据库
create database test_db;

--2. 指定数据库
use test_db;

--3. 创建表
create table t1(
	ID TAG,
	attr ATTRIBUTE,
	int32 INT32,
	int64 INT64,
	boolean BOOLEAN,
	float FLOAT,
	double DOUBLE,
	text TEXT,
	string STRING,
	blob BLOB,
	timestamp TIMESTAMP,
	date DATE
);

--4. 查看表
show tables;

--5. 展示表结构信息
desc t1;

--6. 数据写入
insert into t1(
	time, id, attr, int32, int64, boolean,float,double,text,string,blob,timestamp,date)
values
	(1, 'd1', 'attr1', 1, 111, false, 11.1, 5.5, 'text1', 'string1', X'3b', 100000, '2020-12-12');

insert into t1(
	time, id, attr, int32, int64, boolean,float,double,text,string,blob,timestamp,date)
values
	(2, 'd2', 'attr2', 2, 121, true, 1.1, 55.5, 'text2', 'string2', X'3b', 3600000, '2021-10-10');
	
insert into t1(
	time, id, attr, int32, int64, boolean,float,double,text,string,blob,timestamp,date)
values
	(3, 'd3', 'attr3', 1, 1001, true, 22.2, 1.5, 'text2', 'string1', X'00010000', 100000, '2020-12-12');
	
insert into t1(
	time, id, attr, int32, int64, boolean,float,double,text,string,blob,timestamp,date)
values
	(4, 'd2', 'attr2', 42, 111, false, 1.1, 5.5, 'text1', 'string3', X'3b', 86400000, '2021-10-10');

insert into t1(
	time, id, attr, int32, int64, boolean,float,double,text,string,blob,timestamp,date)
values
	(5, 'd2', 'attr2', 42, 111, true, 11.1, 55.5, 'text3', 'string2', X'00010000', 86400000, '2021-10-10');
	
insert into t1(
	time, id, attr, int32, int64, boolean,float,double,text,string,blob,timestamp,date)
values
	(6, 'd3', 'attr3', 2, 1001, false, 1.1, 5.5, 'text1', 'string3', X'3b', 3600000, '2021-10-10');

insert into t1(
	time, id, attr, int32, int64, boolean,float,double,text,string,blob,timestamp,date)
values
	(7, 'd1', 'attr1', 1, 121, false, 22.2, 1.5, 'text3', 'string3', X'3b', 86400000, '2020-12-12');

--7.全量数据查询
select * from t1 order by time;

--8. APPROX_MOST_FREQUENT查询
select approx_most_frequent(id,1,1) as frequent from t1 group by id order by id;
select approx_most_frequent(id,1,100) as frequent from t1 group by id order by id;
select approx_most_frequent(id,2,1) as frequent from t1 group by id order by id;
select approx_most_frequent(id,3,100) as frequent from t1 group by id order by id;
select approx_most_frequent(id,100,100) as frequent from t1 group by id order by id;

select approx_most_frequent(attr,1,1) as frequent from t1 group by attr order by attr;
select approx_most_frequent(attr,2,1) as frequent from t1 group by attr order by attr;
select approx_most_frequent(attr,3,100) as frequent from t1 group by attr order by attr;

select approx_most_frequent(int32, 1, 1) as frequent from t1 group by int32 order by int32;
select approx_most_frequent(int32, 2, 1) as frequent from t1 group by int32 order by int32;
select approx_most_frequent(int32, 3, 1000) as frequent from t1 group by int32 order by int32;

select approx_most_frequent(int64, 1, 1) as frequent from t1 group by int64 order by int64;
select approx_most_frequent(int64, 2, 1) as frequent from t1 group by int64 order by int64;
select approx_most_frequent(int64, 3, 100) as frequent from t1 group by int64 order by int64;

select approx_most_frequent(boolean, 1, 1) as frequent from t1 group by boolean order by boolean;
select approx_most_frequent(boolean, 1, 50) as frequent from t1 group by boolean order by boolean;
select approx_most_frequent(boolean, 2, 100) as frequent from t1 group by boolean order by boolean;

select approx_most_frequent(float, 1, 1) as frequent from t1 group by float order by float;
select approx_most_frequent(float, 2, 1) as frequent from t1 group by float order by float;
select approx_most_frequent(float, 3, 100) as frequent from t1 group by float order by float;

select approx_most_frequent(double, 1, 1) as frequent from t1 group by double order by double;
select approx_most_frequent(double, 2, 1) as frequent from t1 group by double order by double;
select approx_most_frequent(double, 3, 100) as frequent from t1 group by double order by double;

select approx_most_frequent(text, 1, 1) as frequent from t1 group by text order by text;
select approx_most_frequent(text, 2, 1) as frequent from t1 group by text order by text;
select approx_most_frequent(text, 3, 100) AS frequent from t1 group by text order by text;

select approx_most_frequent(string, 1, 1) as frequent from t1 group by string order by string;
select approx_most_frequent(string, 2, 1) as frequent from t1 group by string order by string;
select approx_most_frequent(string, 3, 100) as frequent from t1 group by string order by string;

select approx_most_frequent(blob, 1, 1) as frequent from t1 group by blob order by blob;
select approx_most_frequent(blob, 2, 1) as frequent from t1 group by blob order by blob;
select approx_most_frequent(blob, 3, 100) as frequent from t1 group by blob order by blob;

select approx_most_frequent(timestamp, 1, 1) as frequent from t1 group by timestamp order by timestamp;
select approx_most_frequent(timestamp, 2, 1) as frequent from t1 group by timestamp order by timestamp;
select approx_most_frequent(timestamp, 3, 100) AS frequent from t1 group by timestamp order by timestamp;

select approx_most_frequent(date, 1, 1) as frequent from t1 group by date order by date;
select approx_most_frequent(date, 2, 1) as frequent from t1 group by date order by date;
select approx_most_frequent(date, 2, 50) as frequent from t1 group by date order by date;


--9. 异常SQL
select approx_most_frequent() from t1;
<<SQLSTATE;
select approx_most_frequent(id) as frequent from t1;
<<SQLSTATE;
select approx_most_frequent(id,1) as frequent from t1;
<<SQLSTATE;
select approx_most_frequent(id,-1,100) as frequent from t1;
<<SQLSTATE;
select approx_most_frequent(id,0,100) as frequent from t1;
<<SQLSTATE;
select approx_most_frequent(id,1,0) as frequent from t1;
<<SQLSTATE;
select approx_most_frequent(id,'d2',100) as frequent from t1;
<<SQLSTATE;
	
--清理环境
drop database test_db;
<<NULL;
