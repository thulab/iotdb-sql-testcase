connect root/TimechoDB@2021;
--清理环境
delete DATABASE root.**;
<<NULL;


//一、创建时间序列：基本数据类型（6种）、编码方式（10种）、压缩方式（6种）
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.数据类型: DATE, 支持编码: PLAIN, RLE, TS_2DIFF, GORILLA, ZIGZAG, CHIMP, SPRINTZ, RLBE
create timeseries root.g1.date.plain.uncompressed with datatype=DATE,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.date.plain.snappy with datatype=DATE,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.date.plain.lz4 with datatype=DATE,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.date.plain.gzip with datatype=DATE,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.date.plain.zstd with datatype=DATE,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.date.plain.lzma2 with datatype=DATE,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.date.rle.uncompressed with datatype=DATE,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.date.rle.snappy with datatype=DATE,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.date.rle.lz4 with datatype=DATE,encoding=RLE,compressor=LZ4;
create timeseries root.g1.date.rle.gzip with datatype=DATE,encoding=RLE,compressor=GZIP;
create timeseries root.g1.date.rle.zstd with datatype=DATE,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.date.rle.lzma2 with datatype=DATE,encoding=RLE,compressor=LZMA2;

create timeseries root.g1.date.ts_2diff.uncompressed with datatype=DATE,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.date.ts_2diff.snappy with datatype=DATE,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.date.ts_2diff.lz4 with datatype=DATE,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.date.ts_2diff.gzip with datatype=DATE,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.date.ts_2diff.zstd with datatype=DATE,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.date.ts_2diff.lzma2 with datatype=DATE,encoding=TS_2DIFF,compressor=LZMA2;

create timeseries root.g1.date.gorilla.uncompressed with datatype=DATE,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.date.gorilla.snappy with datatype=DATE,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.date.gorilla.lz4 with datatype=DATE,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.date.gorilla.gzip with datatype=DATE,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.date.gorilla.zstd with datatype=DATE,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.date.gorilla.lzma2 with datatype=DATE,encoding=GORILLA,compressor=LZMA2;

create timeseries root.g1.date.chimp.uncompressed with datatype=DATE,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.date.chimp.snappy with datatype=DATE,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.date.chimp.lz4 with datatype=DATE,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.date.chimp.gzip with datatype=DATE,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.date.chimp.zstd with datatype=DATE,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.date.chimp.lzma2 with datatype=DATE,encoding=CHIMP,compressor=LZMA2;

create timeseries root.g1.date.sprintz.uncompressed with datatype=DATE,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.date.sprintz.snappy with datatype=DATE,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.date.sprintz.lz4 with datatype=DATE,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.date.sprintz.gzip with datatype=DATE,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.date.sprintz.zstd with datatype=DATE,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.date.sprintz.lzma2 with datatype=DATE,encoding=SPRINTZ,compressor=LZMA2;

create timeseries root.g1.date.rlbe.uncompressed with datatype=DATE,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.date.rlbe.snappy with datatype=DATE,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.date.rlbe.lz4 with datatype=DATE,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.date.rlbe.gzip with datatype=DATE,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.date.rlbe.zstd with datatype=DATE,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.date.rlbe.lzma2 with datatype=DATE,encoding=RLBE,compressor=LZMA2;

create timeseries root.g1.date.zigzag.uncompressed with datatype=DATE,encoding=ZIGZAG,compressor=UNCOMPRESSED;

--反例
create timeseries root.g1.date.dictionary.uncompressed with datatype=DATE,encoding=DICTIONARY,compressor=UNCOMPRESSED;
<<SQLSTATE;

--2.数据类型: TIMESTAMP, 支持编码: PLAIN, RLE, TS_2DIFF, GORILLA, ZIGZAG, CHIMP, SPRINTZ, RLBE
create timeseries root.g1.timestamp1.plain.uncompressed with datatype=TIMESTAMP,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.timestamp1.plain.snappy with datatype=TIMESTAMP,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.timestamp1.plain.lz4 with datatype=TIMESTAMP,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.timestamp1.plain.gzip with datatype=TIMESTAMP,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.timestamp1.plain.zstd with datatype=TIMESTAMP,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.timestamp1.plain.lzma2 with datatype=TIMESTAMP,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.timestamp1.rle.uncompressed with datatype=TIMESTAMP,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.timestamp1.rle.snappy with datatype=TIMESTAMP,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.timestamp1.rle.lz4 with datatype=TIMESTAMP,encoding=RLE,compressor=LZ4;
create timeseries root.g1.timestamp1.rle.gzip with datatype=TIMESTAMP,encoding=RLE,compressor=GZIP;
create timeseries root.g1.timestamp1.rle.zstd with datatype=TIMESTAMP,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.timestamp1.rle.lzma2 with datatype=TIMESTAMP,encoding=RLE,compressor=LZMA2;

create timeseries root.g1.timestamp1.ts_2diff.uncompressed with datatype=TIMESTAMP,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.timestamp1.ts_2diff.snappy with datatype=TIMESTAMP,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.timestamp1.ts_2diff.lz4 with datatype=TIMESTAMP,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.timestamp1.ts_2diff.gzip with datatype=TIMESTAMP,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.timestamp1.ts_2diff.zstd with datatype=TIMESTAMP,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.timestamp1.ts_2diff.lzma2 with datatype=TIMESTAMP,encoding=TS_2DIFF,compressor=LZMA2;

create timeseries root.g1.timestamp1.gorilla.uncompressed with datatype=TIMESTAMP,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.timestamp1.gorilla.snappy with datatype=TIMESTAMP,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.timestamp1.gorilla.lz4 with datatype=TIMESTAMP,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.timestamp1.gorilla.gzip with datatype=TIMESTAMP,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.timestamp1.gorilla.zstd with datatype=TIMESTAMP,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.timestamp1.gorilla.lzma2 with datatype=TIMESTAMP,encoding=GORILLA,compressor=LZMA2;

create timeseries root.g1.timestamp1.chimp.uncompressed with datatype=TIMESTAMP,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.timestamp1.chimp.snappy with datatype=TIMESTAMP,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.timestamp1.chimp.lz4 with datatype=TIMESTAMP,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.timestamp1.chimp.gzip with datatype=TIMESTAMP,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.timestamp1.chimp.zstd with datatype=TIMESTAMP,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.timestamp1.chimp.lzma2 with datatype=TIMESTAMP,encoding=CHIMP,compressor=LZMA2;

create timeseries root.g1.timestamp1.sprintz.uncompressed with datatype=TIMESTAMP,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.timestamp1.sprintz.snappy with datatype=TIMESTAMP,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.timestamp1.sprintz.lz4 with datatype=TIMESTAMP,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.timestamp1.sprintz.gzip with datatype=TIMESTAMP,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.timestamp1.sprintz.zstd with datatype=TIMESTAMP,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.timestamp1.sprintz.lzma2 with datatype=TIMESTAMP,encoding=SPRINTZ,compressor=LZMA2;

create timeseries root.g1.timestamp1.rlbe.uncompressed with datatype=TIMESTAMP,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.timestamp1.rlbe.snappy with datatype=TIMESTAMP,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.timestamp1.rlbe.lz4 with datatype=TIMESTAMP,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.timestamp1.rlbe.gzip with datatype=TIMESTAMP,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.timestamp1.rlbe.zstd with datatype=TIMESTAMP,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.timestamp1.rlbe.lzma2 with datatype=TIMESTAMP,encoding=RLBE,compressor=LZMA2;

create timeseries root.g1.timestamp1.zigzag.uncompressed with datatype=TIMESTAMP,encoding=ZIGZAG,compressor=UNCOMPRESSED;

--反例
create timeseries root.g1.timestamp1.dictionary.uncompressed with datatype=TIMESTAMP,encoding=DICTIONARY,compressor=UNCOMPRESSED;
<<SQLSTATE;

--3.数据类型: STRING, 支持编码: PLAIN, DICTIONARY
create timeseries root.g1.string.plain.uncompressed with datatype=STRING,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.string.plain.snappy with datatype=STRING,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.string.plain.lz4 with datatype=STRING,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.string.plain.gzip with datatype=STRING,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.string.plain.zstd with datatype=STRING,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.string.plain.lzma2 with datatype=STRING,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.string.dictionary.uncompressed with datatype=STRING,encoding=DICTIONARY,compressor=UNCOMPRESSED;
create timeseries root.g1.string.dictionary.snappy with datatype=STRING,encoding=DICTIONARY,compressor=SNAPPY;
create timeseries root.g1.string.dictionary.lz4 with datatype=STRING,encoding=DICTIONARY,compressor=LZ4;
create timeseries root.g1.string.dictionary.gzip with datatype=STRING,encoding=DICTIONARY,compressor=GZIP;
create timeseries root.g1.string.dictionary.zstd with datatype=STRING,encoding=DICTIONARY,compressor=ZSTD;
create timeseries root.g1.string.dictionary.lzma2 with datatype=STRING,encoding=DICTIONARY,compressor=LZMA2;

--反例
create timeseries root.g1.string.rle.uncompressed with datatype=STRING,encoding=RLE,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.string.ts_2diff.uncompressed with datatype=STRING,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.string.gorilla.uncompressed with datatype=STRING,encoding=GORILLA,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.string.freq.uncompressed with datatype=STRING,encoding=FREQ,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.string.zigzag.uncompressed with datatype=STRING,encoding=ZIGZAG,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.string.chimp.uncompressed with datatype=STRING,encoding=CHIMP,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.string.sprintz.uncompressed with datatype=STRING,encoding=SPRINTZ,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.string.rlbe.uncompressed with datatype=STRING,encoding=RLBE,compressor=UNCOMPRESSED;
<<SQLSTATE;

--4.数据类型: BLOB, 支持编码: PLAIN, DICTIONARY
create timeseries root.g1.blob.plain.uncompressed with datatype=BLOB,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.blob.plain.snappy with datatype=BLOB,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.blob.plain.lz4 with datatype=BLOB,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.blob.plain.gzip with datatype=BLOB,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.blob.plain.zstd with datatype=BLOB,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.blob.plain.lzma2 with datatype=BLOB,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.blob.dictionary.uncompressed with datatype=BLOB,encoding=DICTIONARY,compressor=UNCOMPRESSED; <<SQLSTATE;
create timeseries root.g1.blob.dictionary.snappy with datatype=BLOB,encoding=DICTIONARY,compressor=SNAPPY; <<SQLSTATE;
create timeseries root.g1.blob.dictionary.lz4 with datatype=BLOB,encoding=DICTIONARY,compressor=LZ4; <<SQLSTATE;
create timeseries root.g1.blob.dictionary.gzip with datatype=BLOB,encoding=DICTIONARY,compressor=GZIP; <<SQLSTATE;
create timeseries root.g1.blob.dictionary.zstd with datatype=BLOB,encoding=DICTIONARY,compressor=ZSTD; <<SQLSTATE;
create timeseries root.g1.blob.dictionary.lzma2 with datatype=BLOB,encoding=DICTIONARY,compressor=LZMA2; <<SQLSTATE;

--反例
create timeseries root.g1.blob.rle.uncompressed with datatype=BLOB,encoding=RLE,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.blob.ts_2diff.uncompressed with datatype=BLOB,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.blob.gorilla.uncompressed with datatype=BLOB,encoding=GORILLA,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.blob.freq.uncompressed with datatype=BLOB,encoding=FREQ,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.blob.zigzag.uncompressed with datatype=BLOB,encoding=ZIGZAG,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.blob.chimp.uncompressed with datatype=BLOB,encoding=CHIMP,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.blob.sprintz.uncompressed with datatype=BLOB,encoding=SPRINTZ,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.blob.rlbe.uncompressed with datatype=BLOB,encoding=RLBE,compressor=UNCOMPRESSED;
<<SQLSTATE;

--5.查询时间序列
show timeseries root.g1.**;

--6.清理环境
delete DATABASE root.**;
<<NULL;


