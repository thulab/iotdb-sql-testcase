connect root/TimechoDB@2021;
--清理环境
delete DATABASE root.**;
<<NULL;


//一、创建时间序列：基本数据类型（6种）、编码方式（10种）、压缩方式（6种）
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.数据类型: BOOLEAN, 支持编码: PLAIN, RLE
create timeseries root.g1.boolean.plain.uncompressed with datatype=BOOLEAN,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.boolean.plain.snappy with datatype=BOOLEAN,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.boolean.plain.lz4 with datatype=BOOLEAN,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.boolean.plain.gzip with datatype=BOOLEAN,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.boolean.plain.zstd with datatype=BOOLEAN,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.boolean.plain.lzma2 with datatype=BOOLEAN,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.boolean.rle.uncompressed with datatype=BOOLEAN,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.boolean.rle.snappy with datatype=BOOLEAN,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.boolean.rle.lz4 with datatype=BOOLEAN,encoding=RLE,compressor=LZ4;
create timeseries root.g1.boolean.rle.gzip with datatype=BOOLEAN,encoding=RLE,compressor=GZIP;
create timeseries root.g1.boolean.rle.zstd with datatype=BOOLEAN,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.boolean.rle.lzma2 with datatype=BOOLEAN,encoding=RLE,compressor=LZMA2;

--反例
create timeseries root.g1.boolean.ts_2diff.uncompressed with datatype=BOOLEAN,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.boolean.gorilla.uncompressed with datatype=BOOLEAN,encoding=GORILLA,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.boolean.freq.uncompressed with datatype=BOOLEAN,encoding=FREQ,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.boolean.zigzag.uncompressed with datatype=BOOLEAN,encoding=ZIGZAG,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.boolean.chimp.uncompressed with datatype=BOOLEAN,encoding=CHIMP,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.boolean.sprintz.uncompressed with datatype=BOOLEAN,encoding=SPRINTZ,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.boolean.rlbe.uncompressed with datatype=BOOLEAN,encoding=RLBE,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.boolean.dictionary.uncompressed with datatype=BOOLEAN,encoding=DICTIONARY,compressor=UNCOMPRESSED;
<<SQLSTATE;

--2.数据类型: INT32, 支持编码: PLAIN, RLE, TS_2DIFF, GORILLA, FREQ, ZIGZAG, CHIMP, SPRINTZ, RLBE
create timeseries root.g1.int32.plain.uncompressed with datatype=INT32,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.plain.snappy with datatype=INT32,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.int32.plain.lz4 with datatype=INT32,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.int32.plain.gzip with datatype=INT32,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.int32.plain.zstd with datatype=INT32,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.int32.plain.lzma2 with datatype=INT32,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.int32.rle.uncompressed with datatype=INT32,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.rle.snappy with datatype=INT32,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.int32.rle.lz4 with datatype=INT32,encoding=RLE,compressor=LZ4;
create timeseries root.g1.int32.rle.gzip with datatype=INT32,encoding=RLE,compressor=GZIP;
create timeseries root.g1.int32.rle.zstd with datatype=INT32,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.int32.rle.lzma2 with datatype=INT32,encoding=RLE,compressor=LZMA2;

create timeseries root.g1.int32.ts_2diff.uncompressed with datatype=INT32,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.ts_2diff.snappy with datatype=INT32,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.int32.ts_2diff.lz4 with datatype=INT32,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.int32.ts_2diff.gzip with datatype=INT32,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.int32.ts_2diff.zstd with datatype=INT32,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.int32.ts_2diff.lzma2 with datatype=INT32,encoding=TS_2DIFF,compressor=LZMA2;

create timeseries root.g1.int32.gorilla.uncompressed with datatype=INT32,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.gorilla.snappy with datatype=INT32,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.int32.gorilla.lz4 with datatype=INT32,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.int32.gorilla.gzip with datatype=INT32,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.int32.gorilla.zstd with datatype=INT32,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.int32.gorilla.lzma2 with datatype=INT32,encoding=GORILLA,compressor=LZMA2;

create timeseries root.g1.int32.zigzag.uncompressed with datatype=INT32,encoding=ZIGZAG,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.zigzag.snappy with datatype=INT32,encoding=ZIGZAG,compressor=SNAPPY;
create timeseries root.g1.int32.zigzag.lz4 with datatype=INT32,encoding=ZIGZAG,compressor=LZ4;
create timeseries root.g1.int32.zigzag.gzip with datatype=INT32,encoding=ZIGZAG,compressor=GZIP;
create timeseries root.g1.int32.zigzag.zstd with datatype=INT32,encoding=ZIGZAG,compressor=ZSTD;
create timeseries root.g1.int32.zigzag.lzma2 with datatype=INT32,encoding=ZIGZAG,compressor=LZMA2;

create timeseries root.g1.int32.chimp.uncompressed with datatype=INT32,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.chimp.snappy with datatype=INT32,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.int32.chimp.lz4 with datatype=INT32,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.int32.chimp.gzip with datatype=INT32,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.int32.chimp.zstd with datatype=INT32,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.int32.chimp.lzma2 with datatype=INT32,encoding=CHIMP,compressor=LZMA2;

create timeseries root.g1.int32.sprintz.uncompressed with datatype=INT32,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.sprintz.snappy with datatype=INT32,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.int32.sprintz.lz4 with datatype=INT32,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.int32.sprintz.gzip with datatype=INT32,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.int32.sprintz.zstd with datatype=INT32,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.int32.sprintz.lzma2 with datatype=INT32,encoding=SPRINTZ,compressor=LZMA2;

create timeseries root.g1.int32.rlbe.uncompressed with datatype=INT32,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.int32.rlbe.snappy with datatype=INT32,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.int32.rlbe.lz4 with datatype=INT32,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.int32.rlbe.gzip with datatype=INT32,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.int32.rlbe.zstd with datatype=INT32,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.int32.rlbe.lzma2 with datatype=INT32,encoding=RLBE,compressor=LZMA2;

--反例
create timeseries root.g1.int32.dictionary.uncompressed with datatype=INT32,encoding=DICTIONARY,compressor=UNCOMPRESSED;
<<SQLSTATE;

--3.数据类型: INT64, 支持编码: PLAIN, RLE, TS_2DIFF, GORILLA, FREQ, ZIGZAG, CHIMP, SPRINTZ, RLBE
create timeseries root.g1.int64.plain.uncompressed with datatype=INT64,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.plain.snappy with datatype=INT64,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.int64.plain.lz4 with datatype=INT64,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.int64.plain.gzip with datatype=INT64,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.int64.plain.zstd with datatype=INT64,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.int64.plain.lzma2 with datatype=INT64,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.int64.rle.uncompressed with datatype=INT64,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.rle.snappy with datatype=INT64,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.int64.rle.lz4 with datatype=INT64,encoding=RLE,compressor=LZ4;
create timeseries root.g1.int64.rle.gzip with datatype=INT64,encoding=RLE,compressor=GZIP;
create timeseries root.g1.int64.rle.zstd with datatype=INT64,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.int64.rle.lzma2 with datatype=INT64,encoding=RLE,compressor=LZMA2;

create timeseries root.g1.int64.ts_2diff.uncompressed with datatype=INT64,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.ts_2diff.snappy with datatype=INT64,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.int64.ts_2diff.lz4 with datatype=INT64,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.int64.ts_2diff.gzip with datatype=INT64,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.int64.ts_2diff.zstd with datatype=INT64,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.int64.ts_2diff.lzma2 with datatype=INT64,encoding=TS_2DIFF,compressor=LZMA2;

create timeseries root.g1.int64.gorilla.uncompressed with datatype=INT64,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.gorilla.snappy with datatype=INT64,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.int64.gorilla.lz4 with datatype=INT64,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.int64.gorilla.gzip with datatype=INT64,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.int64.gorilla.zstd with datatype=INT64,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.int64.gorilla.lzma2 with datatype=INT64,encoding=GORILLA,compressor=LZMA2;

create timeseries root.g1.int64.zigzag.uncompressed with datatype=INT64,encoding=ZIGZAG,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.zigzag.snappy with datatype=INT64,encoding=ZIGZAG,compressor=SNAPPY;
create timeseries root.g1.int64.zigzag.lz4 with datatype=INT64,encoding=ZIGZAG,compressor=LZ4;
create timeseries root.g1.int64.zigzag.gzip with datatype=INT64,encoding=ZIGZAG,compressor=GZIP;
create timeseries root.g1.int64.zigzag.zstd with datatype=INT64,encoding=ZIGZAG,compressor=ZSTD;
create timeseries root.g1.int64.zigzag.lzma2 with datatype=INT64,encoding=ZIGZAG,compressor=LZMA2;

create timeseries root.g1.int64.chimp.uncompressed with datatype=INT64,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.chimp.snappy with datatype=INT64,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.int64.chimp.lz4 with datatype=INT64,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.int64.chimp.gzip with datatype=INT64,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.int64.chimp.zstd with datatype=INT64,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.int64.chimp.lzma2 with datatype=INT64,encoding=CHIMP,compressor=LZMA2;

create timeseries root.g1.int64.sprintz.uncompressed with datatype=INT64,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.sprintz.snappy with datatype=INT64,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.int64.sprintz.lz4 with datatype=INT64,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.int64.sprintz.gzip with datatype=INT64,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.int64.sprintz.zstd with datatype=INT64,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.int64.sprintz.lzma2 with datatype=INT64,encoding=SPRINTZ,compressor=LZMA2;

create timeseries root.g1.int64.rlbe.uncompressed with datatype=INT64,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.int64.rlbe.snappy with datatype=INT64,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.int64.rlbe.lz4 with datatype=INT64,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.int64.rlbe.gzip with datatype=INT64,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.int64.rlbe.zstd with datatype=INT64,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.int64.rlbe.lzma2 with datatype=INT64,encoding=RLBE,compressor=LZMA2;

--反例
create timeseries root.g1.int64.dictionary.uncompressed with datatype=INT64,encoding=DICTIONARY,compressor=UNCOMPRESSED;
<<SQLSTATE;

--4.数据类型: FLOAT, 支持编码: PLAIN, RLE, TS_2DIFF, GORILLA, FREQ, CHIMP, SPRINTZ, RLBE
create timeseries root.g1.float.plain.uncompressed with datatype=FLOAT,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.float.plain.snappy with datatype=FLOAT,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.float.plain.lz4 with datatype=FLOAT,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.float.plain.gzip with datatype=FLOAT,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.float.plain.zstd with datatype=FLOAT,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.float.plain.lzma2 with datatype=FLOAT,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.float.rle.uncompressed with datatype=FLOAT,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.float.rle.snappy with datatype=FLOAT,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.float.rle.lz4 with datatype=FLOAT,encoding=RLE,compressor=LZ4;
create timeseries root.g1.float.rle.gzip with datatype=FLOAT,encoding=RLE,compressor=GZIP;
create timeseries root.g1.float.rle.zstd with datatype=FLOAT,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.float.rle.lzma2 with datatype=FLOAT,encoding=RLE,compressor=LZMA2;

create timeseries root.g1.float.ts_2diff.uncompressed with datatype=FLOAT,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.float.ts_2diff.snappy with datatype=FLOAT,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.float.ts_2diff.lz4 with datatype=FLOAT,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.float.ts_2diff.gzip with datatype=FLOAT,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.float.ts_2diff.zstd with datatype=FLOAT,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.float.ts_2diff.lzma2 with datatype=FLOAT,encoding=TS_2DIFF,compressor=LZMA2;

create timeseries root.g1.float.gorilla.uncompressed with datatype=FLOAT,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.float.gorilla.snappy with datatype=FLOAT,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.float.gorilla.lz4 with datatype=FLOAT,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.float.gorilla.gzip with datatype=FLOAT,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.float.gorilla.zstd with datatype=FLOAT,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.float.gorilla.lzma2 with datatype=FLOAT,encoding=GORILLA,compressor=LZMA2;

create timeseries root.g1.float.chimp.uncompressed with datatype=FLOAT,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.float.chimp.snappy with datatype=FLOAT,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.float.chimp.lz4 with datatype=FLOAT,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.float.chimp.gzip with datatype=FLOAT,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.float.chimp.zstd with datatype=FLOAT,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.float.chimp.lzma2 with datatype=FLOAT,encoding=CHIMP,compressor=LZMA2;

create timeseries root.g1.float.sprintz.uncompressed with datatype=FLOAT,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.float.sprintz.snappy with datatype=FLOAT,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.float.sprintz.lz4 with datatype=FLOAT,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.float.sprintz.gzip with datatype=FLOAT,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.float.sprintz.zstd with datatype=FLOAT,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.float.sprintz.lzma2 with datatype=FLOAT,encoding=SPRINTZ,compressor=LZMA2;

create timeseries root.g1.float.rlbe.uncompressed with datatype=FLOAT,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.float.rlbe.snappy with datatype=FLOAT,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.float.rlbe.lz4 with datatype=FLOAT,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.float.rlbe.gzip with datatype=FLOAT,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.float.rlbe.zstd with datatype=FLOAT,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.float.rlbe.lzma2 with datatype=FLOAT,encoding=RLBE,compressor=LZMA2;

--反例
create timeseries root.g1.float.zigzag.uncompressed with datatype=FLOAT,encoding=ZIGZAG,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.float.dictionary.uncompressed with datatype=FLOAT,encoding=DICTIONARY,compressor=UNCOMPRESSED;
<<SQLSTATE;

--5.数据类型: DOUBLE, 支持编码: PLAIN, RLE, TS_2DIFF, GORILLA, FREQ, CHIMP, SPRINTZ, RLBE
create timeseries root.g1.double.plain.uncompressed with datatype=DOUBLE,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.double.plain.snappy with datatype=DOUBLE,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.double.plain.lz4 with datatype=DOUBLE,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.double.plain.gzip with datatype=DOUBLE,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.double.plain.zstd with datatype=DOUBLE,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.double.plain.lzma2 with datatype=DOUBLE,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.double.rle.uncompressed with datatype=DOUBLE,encoding=RLE,compressor=UNCOMPRESSED;
create timeseries root.g1.double.rle.snappy with datatype=DOUBLE,encoding=RLE,compressor=SNAPPY;
create timeseries root.g1.double.rle.lz4 with datatype=DOUBLE,encoding=RLE,compressor=LZ4;
create timeseries root.g1.double.rle.gzip with datatype=DOUBLE,encoding=RLE,compressor=GZIP;
create timeseries root.g1.double.rle.zstd with datatype=DOUBLE,encoding=RLE,compressor=ZSTD;
create timeseries root.g1.double.rle.lzma2 with datatype=DOUBLE,encoding=RLE,compressor=LZMA2;

create timeseries root.g1.double.ts_2diff.uncompressed with datatype=DOUBLE,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
create timeseries root.g1.double.ts_2diff.snappy with datatype=DOUBLE,encoding=TS_2DIFF,compressor=SNAPPY;
create timeseries root.g1.double.ts_2diff.lz4 with datatype=DOUBLE,encoding=TS_2DIFF,compressor=LZ4;
create timeseries root.g1.double.ts_2diff.gzip with datatype=DOUBLE,encoding=TS_2DIFF,compressor=GZIP;
create timeseries root.g1.double.ts_2diff.zstd with datatype=DOUBLE,encoding=TS_2DIFF,compressor=ZSTD;
create timeseries root.g1.double.ts_2diff.lzma2 with datatype=DOUBLE,encoding=TS_2DIFF,compressor=LZMA2;

create timeseries root.g1.double.gorilla.uncompressed with datatype=DOUBLE,encoding=GORILLA,compressor=UNCOMPRESSED;
create timeseries root.g1.double.gorilla.snappy with datatype=DOUBLE,encoding=GORILLA,compressor=SNAPPY;
create timeseries root.g1.double.gorilla.lz4 with datatype=DOUBLE,encoding=GORILLA,compressor=LZ4;
create timeseries root.g1.double.gorilla.gzip with datatype=DOUBLE,encoding=GORILLA,compressor=GZIP;
create timeseries root.g1.double.gorilla.zstd with datatype=DOUBLE,encoding=GORILLA,compressor=ZSTD;
create timeseries root.g1.double.gorilla.lzma2 with datatype=DOUBLE,encoding=GORILLA,compressor=LZMA2;

create timeseries root.g1.double.chimp.uncompressed with datatype=DOUBLE,encoding=CHIMP,compressor=UNCOMPRESSED;
create timeseries root.g1.double.chimp.snappy with datatype=DOUBLE,encoding=CHIMP,compressor=SNAPPY;
create timeseries root.g1.double.chimp.lz4 with datatype=DOUBLE,encoding=CHIMP,compressor=LZ4;
create timeseries root.g1.double.chimp.gzip with datatype=DOUBLE,encoding=CHIMP,compressor=GZIP;
create timeseries root.g1.double.chimp.zstd with datatype=DOUBLE,encoding=CHIMP,compressor=ZSTD;
create timeseries root.g1.double.chimp.lzma2 with datatype=DOUBLE,encoding=CHIMP,compressor=LZMA2;

create timeseries root.g1.double.sprintz.uncompressed with datatype=DOUBLE,encoding=SPRINTZ,compressor=UNCOMPRESSED;
create timeseries root.g1.double.sprintz.snappy with datatype=DOUBLE,encoding=SPRINTZ,compressor=SNAPPY;
create timeseries root.g1.double.sprintz.lz4 with datatype=DOUBLE,encoding=SPRINTZ,compressor=LZ4;
create timeseries root.g1.double.sprintz.gzip with datatype=DOUBLE,encoding=SPRINTZ,compressor=GZIP;
create timeseries root.g1.double.sprintz.zstd with datatype=DOUBLE,encoding=SPRINTZ,compressor=ZSTD;
create timeseries root.g1.double.sprintz.lzma2 with datatype=DOUBLE,encoding=SPRINTZ,compressor=LZMA2;

create timeseries root.g1.double.rlbe.uncompressed with datatype=DOUBLE,encoding=RLBE,compressor=UNCOMPRESSED;
create timeseries root.g1.double.rlbe.snappy with datatype=DOUBLE,encoding=RLBE,compressor=SNAPPY;
create timeseries root.g1.double.rlbe.lz4 with datatype=DOUBLE,encoding=RLBE,compressor=LZ4;
create timeseries root.g1.double.rlbe.gzip with datatype=DOUBLE,encoding=RLBE,compressor=GZIP;
create timeseries root.g1.double.rlbe.zstd with datatype=DOUBLE,encoding=RLBE,compressor=ZSTD;
create timeseries root.g1.double.rlbe.lzma2 with datatype=DOUBLE,encoding=RLBE,compressor=LZMA2;

--反例
create timeseries root.g1.double.zigzag.uncompressed with datatype=DOUBLE,encoding=ZIGZAG,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.double.dictionary.uncompressed with datatype=DOUBLE,encoding=DICTIONARY,compressor=UNCOMPRESSED;
<<SQLSTATE;

--6.数据类型: TEXT, 支持编码: PLAIN, DICTIONARY
create timeseries root.g1.text.plain.uncompressed with datatype=TEXT,encoding=PLAIN,compressor=UNCOMPRESSED;
create timeseries root.g1.text.plain.snappy with datatype=TEXT,encoding=PLAIN,compressor=SNAPPY;
create timeseries root.g1.text.plain.lz4 with datatype=TEXT,encoding=PLAIN,compressor=LZ4;
create timeseries root.g1.text.plain.gzip with datatype=TEXT,encoding=PLAIN,compressor=GZIP;
create timeseries root.g1.text.plain.zstd with datatype=TEXT,encoding=PLAIN,compressor=ZSTD;
create timeseries root.g1.text.plain.lzma2 with datatype=TEXT,encoding=PLAIN,compressor=LZMA2;

create timeseries root.g1.text.dictionary.uncompressed with datatype=TEXT,encoding=DICTIONARY,compressor=UNCOMPRESSED;
create timeseries root.g1.text.dictionary.snappy with datatype=TEXT,encoding=DICTIONARY,compressor=SNAPPY;
create timeseries root.g1.text.dictionary.lz4 with datatype=TEXT,encoding=DICTIONARY,compressor=LZ4;
create timeseries root.g1.text.dictionary.gzip with datatype=TEXT,encoding=DICTIONARY,compressor=GZIP;
create timeseries root.g1.text.dictionary.zstd with datatype=TEXT,encoding=DICTIONARY,compressor=ZSTD;
create timeseries root.g1.text.dictionary.lzma2 with datatype=TEXT,encoding=DICTIONARY,compressor=LZMA2;

--反例
create timeseries root.g1.text.rle.uncompressed with datatype=TEXT,encoding=RLE,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.text.ts_2diff.uncompressed with datatype=TEXT,encoding=TS_2DIFF,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.text.gorilla.uncompressed with datatype=TEXT,encoding=GORILLA,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.text.freq.uncompressed with datatype=TEXT,encoding=FREQ,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.text.zigzag.uncompressed with datatype=TEXT,encoding=ZIGZAG,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.text.chimp.uncompressed with datatype=TEXT,encoding=CHIMP,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.text.sprintz.uncompressed with datatype=TEXT,encoding=SPRINTZ,compressor=UNCOMPRESSED;
<<SQLSTATE;
create timeseries root.g1.text.rlbe.uncompressed with datatype=TEXT,encoding=RLBE,compressor=UNCOMPRESSED;
<<SQLSTATE;

--7.查询时间序列
show timeseries root.g1.**;

--8.清理环境
delete DATABASE root.**;
<<NULL;

//二、创建时间序列，路径不合法校验
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.路径中含有..
create timeseries root.wt01.. WITH DATATYPE=DOUBLE,ENCODING=RLE;
<<SQLSTATE;

--2.路径中含有特殊字符
create timeseries root.wt02./ WITH DATATYPE=DOUBLE,ENCODING=RLE;
<<SQLSTATE;

--3.路径中含有通配符*
create timeseries root.wt03.*.temperature WITH DATATYPE=DOUBLE,ENCODING=RLE;
<<SQLSTATE;

--4.查看时间序列
show timeseries;

--5.清理环境
delete DATABASE root.**;
<<NULL;


//三、创建用户手册描述的时间序列
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.创建时间序列
create timeseries root.ln.wf01.wt01.status with datatype=BOOLEAN,encoding=PLAIN;
create timeseries root.ln.wf01.wt01.temperature with datatype=FLOAT,encoding=RLE;
create timeseries root.ln.wf02.wt02.hardware with datatype=TEXT,encoding=PLAIN;
create timeseries root.ln.wf02.wt02.status with datatype=BOOLEAN,encoding=PLAIN;
create timeseries root.sgcc.wf03.wt01.status with datatype=BOOLEAN,encoding=PLAIN;
create timeseries root.sgcc.wf03.wt01.temperature with datatype=FLOAT,encoding=RLE;

--2.查看时间序列
show timeseries root.ln.**;

--3.清理环境
delete DATABASE root.**;
<<NULL;


//四、用户手册描述的简化语言创建时间序列
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.创建时间序列
create timeseries root.ln.wf01.wt01.status BOOLEAN encoding=PLAIN;
create timeseries root.ln.wf01.wt01.temperature FLOAT encoding=RLE;
create timeseries root.ln.wf02.wt02.hardware TEXT encoding=PLAIN;
create timeseries root.ln.wf02.wt02.status BOOLEAN encoding=PLAIN;
create timeseries root.sgcc.wf03.wt01.status BOOLEAN encoding=PLAIN;
create timeseries root.sgcc.wf03.wt01.temperature FLOAT encoding=RLE;

--2.查看时间序列
show timeseries root.ln.**;

--3.清理环境
delete DATABASE root.**;
<<NULL;


//五、用户手册描述的对齐时间序列
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.创建对齐时间序列
CREATE ALIGNED TIMESERIES root.ln.wf01.GPS(latitude FLOAT encoding=PLAIN compressor=SNAPPY, longitude FLOAT encoding=PLAIN compressor=SNAPPY);

--2.查看时间序列和设备
show timeseries root.ln.**;
show devices root.ln.wf01.*;

--3.清理环境
delete DATABASE root.**;
<<NULL;


//六、创建包含特殊字符的时间序列
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.创建时间序列
create timeseries root.ln.wf01.wt01.状态 with datatype=BOOLEAN,encoding=PLAIN;
create timeseries root.ln.wf01.wt01.`温度` with datatype=FLOAT,encoding=RLE;
create timeseries root.ln.wf02.wt02.Aw01 with datatype=TEXT,encoding=PLAIN;
create timeseries root.ln.wf02.wt02.status_1 with datatype=BOOLEAN,encoding=PLAIN;
create timeseries root.ln.wf03.`.` WITH DATATYPE=DOUBLE,ENCODING=RLE;
create timeseries root.ln.wf04.`''` WITH DATATYPE=DOUBLE,ENCODING=RLE;
create timeseries root.ln.wf05.`""` WITH DATATYPE=DOUBLE,ENCODING=RLE;
create timeseries root.ln.wf06.`|` WITH DATATYPE=DOUBLE,ENCODING=RLE;
create timeseries root.ln.wf07.`/` WITH DATATYPE=DOUBLE,ENCODING=RLE;

--2.查看时间序列
show timeseries root.ln.**;

--3.清理环境
delete DATABASE root.**;
<<NULL;


//七、死区处理：SDT旋转门压缩
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.创建时间序列
CREATE TIMESERIES root.sg1.d0.s0 WITH DATATYPE=INT32,ENCODING=PLAIN,DEADBAND=SDT,COMPDEV=2;

--2.查询设备和时间序列
show timeseries root.sg1.**;
show devices root.sg1.*;

--3.清理环境
delete DATABASE root.**;
<<NULL;


//八、创建时间序列路径中含有w - week; d - day; m - month
--0.清理环境
delete DATABASE root.**;
<<NULL;

--1.创建时间序列
create timeseries root.ln.d1.123w with datatype=INT32,encoding=rle;
create timeseries root.db12d.42y.123w with datatype=FLOAT,encoding=rle;
create timeseries root.12m.20h.25w.65d.200y with datatype=BOOLEAN,encoding=rle;

--2.查询数据库、设备和时间序列
show databases;
show devices root.ln.*;
show timeseries root.ln.**;

--3.清理环境
delete DATABASE root.**;
<<NULL;