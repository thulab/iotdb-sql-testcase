//一、算术运算查询

--0. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;

--1. 创建存储组和时间序列
create database root.sg;
create timeseries root.sg.d1.s1 with datatype=float,encoding=RLE;
create timeseries root.sg.d1.s2 with datatype=double,encoding=RLE;
create timeseries root.sg.d1.s3 with datatype=BOOLEAN,encoding=RLE;
create timeseries root.sg.d1.s4 with datatype=TEXT,encoding=PLAIN;
create aligned timeseries root.sg.d2(s1 FLOAT encoding=PLAIN compressor=SNAPPY, s2 FLOAT encoding=PLAIN compressor=SNAPPY);

--2. 查询存储组和时间序列
show databases root.sg;
show timeseries root.sg.**;
show devices;

--3. 插入数据
insert into root.sg.d1(time,s1,s2,s3,s4) values(1,1.1,2.2,TRUE,'001');
insert into root.sg.d1(time,s1,s2,s3,s4) values(2,2.2,3.3,FALSE,'002');
insert into root.sg.d2(time,s1,s2) aligned values(1,1.1,2.2),(2,1.1,2.2);  

--4. 一元算术运算符，输出数据类型与输入类型不一致【输入类型为BOOLEAN或TEXT类型，给出提示】
select s1,- s1,s3,+ s3,s1+s3,s1-s3 from root.sg.d1;
<<SQLSTATE;
select s1,- s1,s4,+ s4,s1+s4,s1-s4 from root.sg.d1;
<<SQLSTATE;

--5. 一元算术运算符，输出数据类型与输入类型一致输入符合的类型：
select s1, - s1, s2, + s2, s1 + s2, s1 - s2 from root.sg.d1;
select s1,s2,s1 + s2, s1 - s2 from root.sg.d2;

--6. 二元算术运算符，输出数据类型与输入类型不一致【输入类型为BOOLEAN或TEXT类型，给出提示】
select s1,- s1,s3,+ s3, s1 + s3, s1 - s3, s1 * s3, s1 /s3, s1 % s3 from root.sg.d1;  
<<SQLSTATE;
select s1,- s1,s4,+ s4, s1 + s4, s1 - s4, s1 * s4, s1 /s4, s1 % s4 from root.sg.d1; 
<<SQLSTATE; 

--7. 二元算术运算符，输出数据类型与输入类型一致输入符合的类型：
select s1,- s1, s2,+ s2, s1 + s2, s1 - s2, s1 * s2, s1 /s2, s1 % s2 from root.sg.d1;
select s1, s2, - s1, + s2, s1 * s2, s1 / s2, s1 % s2 from root.sg.d2;

--8.0 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;


//二、比较运算符和逻辑运算符

--0. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;

--1. 创建存储组和时间序列
create database root.sg;
create timeseries root.sg.d1.s1 with datatype=float,encoding=RLE;
create timeseries root.sg.d1.s2 with datatype=double,encoding=RLE;
create timeseries root.sg.d1.s3 with datatype=BOOLEAN,encoding=RLE;
create timeseries root.sg.d1.s4 with datatype=TEXT,encoding=PLAIN;
create timeseries root.sg.d1.s5 with datatype=BOOLEAN,encoding=RLE;
create timeseries root.sg.d1.s6 with datatype=INT32,encoding=RLE;
create timeseries root.sg.d1.s7 with datatype=INT64,encoding=RLE;

--2. 查询存储组和时间序列
show databases root.sg;
show timeseries root.sg.**;
show devices;

--3. 插入数据
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(1,1.1,2.2,TRUE,'001',false,12,10);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(2,2.2,3.3,FALSE,'002',true,13,30);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(3,10.1,11.2,TRUE,'102',false,1,10);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(4,22.2,30.3,FALSE,'4586145',true,3,30);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(5,31.1,25.2,TRUE,'303',false,22,10);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(6,8.82,9.3,FALSE,'aabcddf',true,-5,30);

--4. 逻辑运算【!/NOT 】：输入输出均为BOOLEAN数据类型
--4.1 非BOOLEAN数据类型执行逻辑运算
select s1, !(s1) from root.sg.d1;
<<SQLSTATE;
select s2, !(s2) from root.sg.d1;
<<SQLSTATE;
select s4, !(s4) from root.sg.d1;
<<SQLSTATE;
select s7, not(s7) from root.sg.d1;
<<SQLSTATE;

--4.2 BOOLEAN数据类型执行逻辑运算
select s3, !(s3) from root.sg.d1;
select s5, not(s5) from root.sg.d1;
select s3, s5, !(s3 != s5) from root.sg.d1;

--5. 比较运算符【>, >=, <, <=, ==, !=】：输入类型为INT32, INT64, FLOAT, DOUBLE，输出为BOOLEAN
--5.1 不支持的数据类型比较运算【BOOLEAN和TEXT】
select s1, s4, s4 >=  s1 from root.sg.d1; 
<<SQLSTATE;
select s2, s3, s2 == s3 from root.sg.d1;
<<SQLSTATE;
select s3, s4, s3 != s4 from root.sg.d1;
<<SQLSTATE;
--5.2 INT32、INT64、FLOAT、DOUBLE运算
select s1, s2, s6, s7, s1 > s2, s6 <= s7, s1 == s6, s2 != s7, s1 >= s7, s2 < s7 from root.sg.d1;
--5.3 两个BOOLEAN类型运算【==和!=】
select s3, s5, s3 == s5, s3 != s5 from root.sg.d1;

--6. 逻辑运算符【AND,&,&&; OR,|,||】
--6.1 非BOOLEAN数据类型执行逻辑运算
select s1, s3, s1 and s3  from root.sg.d1;
<<SQLSTATE;
select s2, s3, s2 & s3  from root.sg.d1;
<<SQLSTATE;
select s3, s4, s3 && s4  from root.sg.d1;
<<SQLSTATE;
select s5, s6, s5 or s6  from root.sg.d1;
<<SQLSTATE;
select s5, s7, s5 | s7  from root.sg.d1;
<<SQLSTATE;
--6.2 BOOLEAN数据类型执行逻辑运算
select s3, s5, s3 and s5, s3 or s5 from root.sg.d1;
select s3, s5, s3 & s5, s3 | s5 from root.sg.d1;
select s3, s5, s3 && s5, s3 || s5 from root.sg.d1;

--7. IN运算符【IN,NOT IN,CONTAINS,NOT CONTAINS】
--7.1 查询的列对应的数据类型匹配不到括号里数值对应的数据类型
select s1 in (1,169,12.5,100.15,false,true,'V001') from root.sg.d1;
<<SQLSTATE;
select s2 in (1,169,12.5,100.15,false,true,'V001') from root.sg.d1;
<<SQLSTATE;
select s4 in (1,169,12.5,100.15) from root.sg.d1;
select s5 in (1,169,12.5,100.15) from root.sg.d1;
<<SQLSTATE;
select s6 in (1,169,12.5,100.15) from root.sg.d1;
<<SQLSTATE;
select s7 in (1,169,12.5,100.15) from root.sg.d1;
<<SQLSTATE;
--7.2 查询的列对应的数据类型匹配到括号里数值对应的数据类型
select s1 in (1,169,12.5,100.15) from root.sg.d1;
select s2 in (3.3,169,11.2,100.15) from root.sg.d1;
select s4 in (1,169,12.5,100.15,false,true,'V001') from root.sg.d1;
select s6 contains (-1, 0, 22, 1) from root.sg.d1;

--7.3 【NOT IN】和【NOT CONTAINS】：不是指定列表中的值
select s1 from root.sg.d1 where s1 not in (-2, 1.1, '1.2', 10);
select s2 from root.sg.d1 where s2 not contains (0, 9.3, '1.2', 1);

--8. 字符串匹配运算符【LIKE,NOT LIKE,REGEXP,NOT REGEXP】：输入类型为所有的6种数据类型，输出为BOOLEAN类型
--8.1 非TEXT数据类型匹配查询
select s1 like '1%' from root.sg.d1;
<<SQLSTATE;
select s2 regexp '[0-100]' from root.sg.d1;
<<SQLSTATE;
select s3 like '%true' from root.sg.d1;
<<SQLSTATE;
select s6 regexp '[0-100]' from root.sg.d1;
<<SQLSTATE;
select s7 regexp '[0-100]' from root.sg.d1;
<<SQLSTATE;
--8.2 TEXT数据类型匹配查询
select s4 regexp '[0-100]' from root.sg.d1;
select s4 not regexp '^[A-Za-z]+$' from root.sg.d1;
select s4 like '1%' from root.sg.d1;
select s4 not like '_bc_' from root.sg.d1;

--9.BETWEEN ... AND ... 运算符
--9.1 BETWEEN ... AND ...【在指定范围内】
select s1 from root.sg.d1 where s1 between 10.0 and 35;

--9.2 NOT BETWEEN ... AND ...【不在指定范围内】
select s2 from root.sg.d1 where s2 not between 1.0 and 10;

--10.清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;


//三、内置时间序列生成函数

--0. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;

--1. 创建存储组和时间序列
create database root.sg;
create timeseries root.sg.d1.s1 with datatype=float,encoding=PLAIN;
create timeseries root.sg.d1.s2 with datatype=double,encoding=PLAIN;
create timeseries root.sg.d1.s3 with datatype=BOOLEAN,encoding=RLE;
create timeseries root.sg.d1.s4 with datatype=TEXT,encoding=PLAIN;
create timeseries root.sg.d1.s5 with datatype=INT32,encoding=RLE;
create timeseries root.sg.d1.s6 with datatype=INT64,encoding=RLE;
create timeseries root.sg.d1.s7 with datatype=TEXT,encoding=PLAIN;
create timeseries root.sg.d2.s1 with datatype=INT64,encoding=RLE;

--2. 查询存储组和时间序列
show databases root.sg;
show timeseries root.sg.**;

--3. 插入数据并数据查询
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(1,1.111,2.21023,TRUE,'1731',12,20,'abcdiekdhs');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(2,1.10,2.20013,TRUE,'0.001',12,20,'abcdiekdhs');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(3,1.1015,2.142,TRUE,'111',12,20,'abcdiekdhs');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(4,0.0,-1.0013,FALSE,'warn:-8721',-1,14,'test');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(5,25360.51,-1.2148632,TRUE,'error:-37229',14,-1,'102');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(6,2.6278,0.0,FALSE,'100',23,14,'18403');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(7,1001.1006,0.156242,TRUE,'FALSE',0,20,'[0.0.0.0][FAIL]');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(8,-1.10123,1.1,FALSE,'warn:-8721',22,1,'20394');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(9,3.045,2.0023145,TRUE,'false',1,10,'sunA839');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(10,200.60012,3.3101,FALSE,'true',222,0,'Version 002 QQ');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(11,-101.011,-0.512,TRUE,'-37229.1',23,14,'[127.0.0.1][PASS]');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6,s7) values(12,-0.5153,-0.205,TRUE,'false',-2,2,'uiewi 88kd');
insert into root.sg.d2(time,s1) values(1,12);
insert into root.sg.d2(time,s1) values(2,32);
insert into root.sg.d2(time,s1) values(1607603775000,1531604122307244742);
insert into root.sg.d2(time,s1) values(1607603776000,-8581625725655917595);

select * from root.sg.**;

--4. 数学函数
--4.1【SIN】、【COS】、【TAN】
select s1, sin(s1), cos(s1), tan(s1) from root.sg.d1 limit 5 offset 2;
--4.2【ASIN】、【ACOS】、【ATAN】
select s2, ASIN(s2), ACOS(s2), ATAN(s2) from root.sg.d1;
--4.3【SINH】、【COSH】、【TANH】
select s5, SINH(s5), COSH(s5), TANH(s5) from root.sg.d1;
--4.4【DEGREES】、【RADIANS】、【ABS】、【SIGN】
select s6, DEGREES(s6), RADIANS(s6), ABS(s6),SIGN(s6) from root.sg.d1;
--4.5【CEIL】、【FLOOR】
select s1, CEIL(s1), FLOOR(s1) from root.sg.d2;
--4.6【ROUND】
select s1, round(s1,2) from root.sg.**;
select s1, round(s1) from root.sg.d1;
select s1, round(s1,0) from root.sg.d1;
select s1, round(s1,-2) from root.sg.d1;
select s2, round(s2,3) from root.sg.d1;
select s3, round(s3,1) from root.sg.d1;
<<SQLSTATE;
select s4, round(s4,1) from root.sg.d1;
<<SQLSTATE;
select s5, round(s5,2) from root.sg.d1;
select s6, round(s6,2) from root.sg.d1;

--4.7【EXP】
select s1, EXP(s1) from root.sg.d2;
--4.8【LN】、【LOG10】、【SQRT】
select s5, LN(s6), LOG10(s5), SQRT(s6) from root.sg.d1;

--5. 字符串函数
--5.1【string_contains】和【string_matches】
select s4, string_contains(s4, 's'='warn'), string_matches(s4, 'regex'='[^\\s]+37229') from root.sg.d1;
--5.2 【LENGTH】和【LOCATE】
select s4, LENGTH(s4), LOCATE(s4, 'target'='warn', 'reverse'='true') from root.sg.d1;
--5.3 【STARTSWITH】和【ENDSWITH】
select s4, STARTSWITH(s4, 'target'='w'), ENDSWITH(s4, 'target'='229') from root.sg.d1;
--5.4 【CONCAT】
select s4, CONCAT(s4, 'target'='t', 'series_behind'='true') from root.sg.d1;
--5.5 【SUBSTRING】
--V1.2.x之前的旧语法
select s4, SUBSTRING(s4, 'start'='0','end'='2') from root.sg.d1;
<<SQLSTATE;
select s4, substring(s4,3,2) from root.sg.d1;
select s7, substring(s7,1),substring(s7,0) from root.sg.d1;
--beginPosition需为大于等于0的正整数校验
select s7, substring(s7,-2,1),substring(s7,-3,5) from root.sg.d1;
<<SQLSTATE;
--length大于等于0的整数校验
select s7, substring(s7,-1) from root.sg.d1;
<<SQLSTATE;
select s7, substring(s7,2,-1) from root.sg.d1;
<<SQLSTATE;
--数据类型的校验
select s1,substring(s1,1) from root.sg.d1;
<<SQLSTATE;
select s2,substring(s2,1) from root.sg.d1;
<<SQLSTATE;
select s3,substring(s3,1) from root.sg.d1;
<<SQLSTATE;
select s5,substring(s5,1) from root.sg.d1;
<<SQLSTATE;
select s6,substring(s6,1) from root.sg.d1;
<<SQLSTATE;
--5.6 【UPPER】和【LOWER】
select s4, UPPER(s4), LOWER(s4) from root.sg.d1;
--5.7 【TRIM】和【STRCMP】
select s4, s7, TRIM(s7), STRCMP(s4,s7) from root.sg.d1;
--5.8 【STRREPLACE】、【REGEXMATCH】、【REGEXREPLACE】、【REGEXSPLIT】
select s7, STRREPLACE(s7,'target'='test','replace'='num','limit'='1','offset'='1','reverse'='true') from root.sg.d1;
<<SQLSTATE;
select s7, REGEXMATCH(s7,"regex"="\d+\.\d+\.\d+\.\d+", "group"="0") from root.sg.d1;
<<SQLSTATE;
select s7, REGEXREPLACE(s7,"regex"="0\.0\.0\.(\d+)", "replace"="cluster-$1", "limit"="1") from root.sg.d1;
<<SQLSTATE;
select s7, REGEXSPLIT(s7,"regex"=",", "index"="-1") from root.sg.d1;
<<SQLSTATE;

--6. 选择函数
select s1, top_k(s1, 'k'='2'), bottom_k(s1, 'k'='2') from root.sg.d2 where time > 1607603775000; 

--7. 趋势计算函数
select s1, time_difference(s1), difference(s1), non_negative_difference(s1), derivative(s1), non_negative_derivative(s1) from root.sg.d1 limit 5 offset 1; 

--8. 常序列生成函数
select s1, s2, const(s1, 'value'='1024', 'type'='INT64'), pi(s2), e(s1, s2) from root.sg.d1; 
 
--9. 数据类型转换函数【CAST】
--9.1 FLOAT类型转换其他数据类型
select s1, cast(s1 as DOUBLE), cast(s1 as INT32), cast(s1 as INT64), cast(s1 as BOOLEAN), cast(s1 as TEXT) from root.sg.d1;
--9.2 DOUBLE类型转换其他数据类型
select s2, cast(s2 as FLOAT), cast(s2 as INT32), cast(s2 as INT64), cast(s2 as BOOLEAN), cast(s1 as TEXT) from root.sg.d1;
--9.3 BOOLEAN类型转换其他数据类型
select s3, cast(s3 as DOUBLE), cast(s3 as FLOAT), cast(s3 as INT32), cast(s3 as INT64), cast(s3 as TEXT) from root.sg.d1;
--9.4 TEXT类型转换其他数据类型
select s4, cast(s4 as DOUBLE), cast(s4 as FLOAT) from root.sg.d1 where time <= 3;
select s4, cast(s4 as INT32), cast(s4 as INT64) from root.sg.d1 where time < 2;
select s4, cast(s4 as BOOLEAN) from root.sg.d1 where time > 8 and time <= 10;
select s4, cast(s4 as DOUBLE), cast(s4 as FLOAT), cast(s4 as INT32), cast(s4 as INT64), cast(s4 as BOOLEAN)from root.sg.d1;
<<SQLSTATE;
--9.5 INT32类型转换其他数据类型
select s5, cast(s5 as DOUBLE), cast(s5 as FLOAT), cast(s5 as INT64), cast(s5 as BOOLEAN), cast(s5 as TEXT)from root.sg.d1;
--9.6 INT64类型转换其他数据类型
select s6, cast(s6 as DOUBLE), cast(s6 as FLOAT), cast(s6 as INT32), cast(s6 as BOOLEAN), cast(s6 as TEXT)from root.sg.d1;

--10. 条件函数
select s1, on_off(s1, 'threshold'='2') from root.sg.d1;
select s1, in_range(s1, 'lower'='2', 'upper'='3.1') from root.sg.d1;

--11. 连续满足区间函数
select s1, zero_count(s1), non_zero_count(s2), zero_duration(s3), non_zero_duration(s5) from root.sg.d1;
select s4, zero_count(s4), non_zero_count(s4), zero_duration(s4), non_zero_duration(s4) from root.sg.d1;
<<SQLSTATE;

--12. 等数量分桶降采样函数
--12.1 等数量分桶聚合采样【EQUAL_SIZE_BUCKET_AGG_SAMPLE】
select equal_size_bucket_agg_sample(s1, 'type'='avg','proportion'='0.1') as agg_avg, equal_size_bucket_agg_sample(s1, 'type'='max','proportion'='0.1') as agg_max, equal_size_bucket_agg_sample(s1,'type'='min','proportion'='0.1') as agg_min, equal_size_bucket_agg_sample(s1, 'type'='sum','proportion'='0.1') as agg_sum, equal_size_bucket_agg_sample(s1, 'type'='extreme','proportion'='0.1') as agg_extreme, equal_size_bucket_agg_sample(s1, 'type'='variance','proportion'='0.1') as agg_variance from root.sg.d1;
--12.2 等数量分桶M4采样【EQUAL_SIZE_BUCKET_M4_SAMPLE】
select equal_size_bucket_m4_sample(s1, 'proportion'='0.1') as M4_sample from root.sg.d1;
--12.3 等数量分桶离群值采样【EQUAL_SIZE_BUCKET_OUTLIER_SAMPLE】
select equal_size_bucket_outlier_sample(s1, 'proportion'='0.1', 'type'='avg', 'number'='2') as outlier_avg_sample, equal_size_bucket_outlier_sample(s1, 'proportion'='0.1', 'type'='stendis', 'number'='2') as outlier_stendis_sample, equal_size_bucket_outlier_sample(s1, 'proportion'='0.1', 'type'='cos', 'number'='2') as outlier_cos_sample, equal_size_bucket_outlier_sample(s1, 'proportion'='0.1', 'type'='prenextdis', 'number'='2') as outlier_prenextdis_sample from root.sg.d1;

--13. M4函数
select M4(s1,'timeInterval'='25','displayWindowBegin'='0','displayWindowEnd'='100') from root.sg.d1;
select M4(s5,'windowSize'='10') from root.sg.d1;

--14. JEXL自定义函数
select jexl(s6, 'expr'='x -> {x + x}') as jexl1, jexl(s6, 'expr'='x -> {x * 3}') as jexl2, jexl(s6, 'expr'='x -> {x * x}') as jexl3, jexl(s6, 'expr'='x -> {multiply(x, 100)}') as jexl4, jexl(s6, s2, 'expr'='(x, y) -> {x + y}') as jexl5, jexl(s6, s2, s4, 'expr'='(x, y, z) -> {x + y + z}') as jexl6 from root.sg.d1;

--15. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;


//四、嵌套表达式
//由于聚合查询和时间序列查询不能在一条查询语句中同时出现，故支持的嵌套表达式分为时间序列查询嵌套表达式和聚合查询嵌套表达式两类。

--0. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;

--1. 创建存储组和时间序列
create database root.sg;
create timeseries root.sg.d1.s1 with datatype=float,encoding=RLE;
create timeseries root.sg.d1.s2 with datatype=double,encoding=RLE;
create timeseries root.sg.d1.s3 with datatype=BOOLEAN,encoding=RLE;
create timeseries root.sg.d1.s4 with datatype=TEXT,encoding=PLAIN;
create timeseries root.sg.d1.s5 with datatype=INT32,encoding=RLE;
create timeseries root.sg.d1.s6 with datatype=INT64,encoding=RLE;
create timeseries root.sg.d2.s1 with datatype=INT64,encoding=RLE;
create aligned timeseries root.sg.d3(s1 FLOAT encoding=PLAIN compressor=SNAPPY, s2 FLOAT encoding=PLAIN compressor=SNAPPY);

--2. 查询存储组和时间序列
show databases root.sg;
show timeseries root.sg.**;
show devices;

--3. 插入数据
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(1,1.1,2.2,TRUE,'warn:1731',12,20);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(2,2.2,3.3,FALSE,'warn:-8721',22,14);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(3,2.5,2.2,TRUE,'error:-37229',14,22);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(4,2.6,3.3,FALSE,'warn:1731',23,14);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(5,1.1,2.2,TRUE,'warn:1731',12,20);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(6,2.2,3.3,FALSE,'warn:-8721',22,14);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(7,2.5,2.2,TRUE,'warn:1731',14,22);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(8,null,2.1,FALSE,'error:-37229',null,14);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(9,2.6,3.3,FALSE,'error:-37229',23,null);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(10,2.6,null,FALSE,'error:-37229',23,14);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(11,null,3.3,FALSE,'error:-37229',23,14);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(12,2.6,3.3,FALSE,'error:-37229',23,14);
insert into root.sg.d2(time,s1) values(1,12);
insert into root.sg.d2(time,s1) values(2,32);
insert into root.sg.d2(time,s1) values(1607603775000,1531604122307244742);
insert into root.sg.d2(time,s1) values(1607603776000,-8581625725655917595);
insert into root.sg.d3(time,s1,s2) aligned values(1,-1.1,1.2),(2,0.0,2.3),(3,5.5,-2.6);

--4. 时间序列查询嵌套表达式
--4.1 非对齐时间序列嵌套查询
select ** from root;
select s1,s2,((s1 + 1) * 2 - 1) % 2 + 1.5,sin(s1 + sin(s1 + sin(s2))),-(s1 + s2) * (sin(s1 + s2) * sin(s1 + s2) + cos(s1 + s2) * cos(s1 + s2)) + 1 from root.sg.d1;
select (s1 + s2) * 2 + sin(s1) from root.sg.d1;
select (s1 + *) / 2  from root.sg.d2;
select (s1 + s2) * 3 from root.sg.d1, root.sg.d2;
--4.2 V0.14.x对齐时间序列开始支持时间序列查询嵌套表达式
select s1, s2, sin(5*(s1+s2)/2) + cos((s1+2)% s2) from root.sg.d3;
--4.3 同一路径下的时间序列，算术查询(+和-)
select s1, s2 , s1 + s2 from root.sg.d1;
select s1 + * from root.sg.d2;
--4.4 同一路径下，复杂算术查询
select s1, s2, ((s1 + 1) * 2 - 1) % 2 + 1.5 + s2 from root.sg.d1;
--4.5 同一路径下，内置函数查询
select s1, s2, sin(s1 + sin(s1 + sin(s2))) from root.sg.d1;
--4.6 不同路径的时间序列进行算术查询
select s1 + s2 from root.sg.d1, root.sg.d2, root.sg.d3;
--4.7 BOOLEAN和TEXT类型算术查询校验
select s1 + s3 from root.sg.d1;
<<SQLSTATE;
select s2 - s4 from root.sg.d1;
<<SQLSTATE;
--4.8 多个* 算术查询
select s1,s1 + * + *  from root.sg.d2;
--4.9 多个** 相加查询
select s1 + ** from root.sg.d2;
--4.10 时间序列中只要有一方含有null，结果集肯定为null值 
select s5, s6, s5 + s6 from root.sg.d1;

--5. 聚合查询嵌套表达式
--5.1 不指定GROUP BY的聚合查询
select avg(s1),sin(avg(s2)),avg(s1) + 1,-sum(s2),avg(s1) + sum(s2) from root.sg.d1;
select avg(*), (avg(*) + 1) * 3 / 2 -1 from root.sg.d2;
select count(s1), ((count(s2) + 1) * 2 - 1) % 2 + 1.5 from root.sg.d1;
select last_value(s1)*first_value(s2) from root.sg.d3;
--5.2 指定GROUP BY 聚合查询
select avg(s1),sin(avg(s1)),avg(s1) + 1,-sum(s2),avg(s1) + sum(s2) as custom_sum from root.sg.d1 GROUP BY([1, 15), 1ms);
--5.3 聚合函数内部有表达式查询
select avg(s1+1) from root.sg.d1;
select count(s1+s2+1) from root.sg.d1;
select last_value(s1*1) % EXTREME(s2+2) from root.sg.d3;
select avg(s1*s2) from root.sg.d1;
--5.4 支持按层级聚合查询
select avg(s1) + avg(s2) from root.sg.* group by level=1;
select count(s1+s2)* first_value(s2) from root.*.* group by level=2;
--5.5 支持空值填充查询
SELECT avg(s1) + first_value(s6) FROM root.sg.d1 GROUP BY([0, 20), 1ms) FILL(previous);

--6. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;


//五、使用别名

--0. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;

--1. 创建存储组和时间序列
create database root.sg;
create timeseries root.sg.d1.s1 with datatype=float,encoding=RLE;
create timeseries root.sg.d1.s2 with datatype=double,encoding=RLE;
create timeseries root.sg.d1.s3(ID) with datatype=INT32,encoding=RLE tags(tag1=V1) attributes(attr1=001);
create aligned timeseries root.sg.d2(s1(sun) INT32 tags(tag1=v1, tag2=v2) attributes(attr1=v1, attr2=v2), s2(moon) DOUBLE tags(tag3=v3, tag4=v4) attributes(attr3=v3, attr4=v4));
create timeseries root.db.test.m1 with datatype=BOOLEAN,encoding=PLAIN;

--2. 查询存储组和时间序列
show databases root.**;
show devices;
show timeseries root.**;

--3. 插入数据
insert into root.sg.d1(time,s1,s2,s3) values(1,20.12,50.32,1);
insert into root.sg.d1(time,s1,s2,s3) values(20,21.44,65.33,2);
insert into root.sg.d2(time,s1,s2) aligned values(1,10,1.1),(2,5,-1.2);
insert into root.db.test(time,m1) values(1,true),(2,true),(20,false);

--4. 别名查询
select ** from root;
select s1 as temperature,s1 as ID from root.sg.d1, root.sg.d2 align by time;
<<SQLSTATE;
select s1 as temperature,m1 as status from root.sg.d1, root.db.test align by time;
select s1, s2 from root.sg.d1, root.sg.d2 align by time;
select s1 as temperature, s2 as speed from root.sg.d1; 
select ID, s1, s2 from root.sg.d1;
select ID, sun, moon from root.sg.*;

--5. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;


//六、DIFF：统计序列中某数据点的值与前一数据点的值的差。第一个数据点没有对应的结果输出，输出值为null

--0. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;

--1.准备数据
create database root.sg;
create timeseries root.sg.d1.s1 with datatype=float,encoding=RLE;
create timeseries root.sg.d1.s2 with datatype=double,encoding=RLE;
create timeseries root.sg.d1.s3 with datatype=BOOLEAN,encoding=RLE;
create timeseries root.sg.d1.s4 with datatype=TEXT,encoding=PLAIN;
create timeseries root.sg.d1.s5 with datatype=INT32,encoding=RLE;
create timeseries root.sg.d1.s6 with datatype=INT64,encoding=RLE;

insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(1,1.0,1.1,false,'V1',1,10);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(2,-1.1,1.0,true,'V2',0,-1);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(3,2.0,null,false,'V1',1,10);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(4,null,1.2,true,'V2',0,-1);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(5,2.0,null,false,'V1',1,10);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(6,-1.2,0.0,true,'V2',null,2);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(7,2.5,0.1,false,'V1',20,null);
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(8,3.0,0.2,false,'V2',2,10);

--2.查询存储组和时间序列，然后数据查询
show databases root.**;
show devices;
show timeseries root.**;
select * from root.**;

--3.不使用ignoreNull参数(忽略null)
SELECT DIFF(s1), DIFF(s2) from root.sg.d1;

--4.使用ignoreNull参数
SELECT DIFF(s5, 'ignoreNull'='false'), DIFF(s6, 'ignoreNull'='false') from root.sg.d1;

--5.不支持的数据类型验证
SELECT DIFF(s3), DIFF(s5) from root.sg.d1;
<<SQLSTATE;
SELECT DIFF(s4), DIFF(s6) from root.sg.d1;
<<SQLSTATE;

--6. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;
