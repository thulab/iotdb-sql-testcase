//CASE表达式

--0. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;

--1. 创建存储组和时间序列
create database root.sg;
create timeseries root.sg.d1.s1 with datatype=float,encoding=RLE;
create timeseries root.sg.d1.s2 with datatype=double,encoding=RLE;
create timeseries root.sg.d1.s3 with datatype=int32,encoding=RLE;
create timeseries root.sg.d1.s4 with datatype=int64,encoding=RLE;
create timeseries root.sg.d1.s5 with datatype=BOOLEAN,encoding=RLE;
create timeseries root.sg.d1.s6 with datatype=TEXT,encoding=PLAIN;

--2. 查询存储组和时间序列
show databases root.sg;
show devices root.sg.*;
show timeseries root.sg.**;

--3. 插入数据
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(1,10000.00,80.00,60,1001,false,'assedfkedcc');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(2,9999.01,60.00,89,2500,false,'test001');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(3,20021.11,50.90,99,500,true,'hunl10test');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(4,3500.01,100.00,100,20,false,'test001');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(5,1522.25,66.96,60,1001,false,'adddcc');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(6,9999.99,90.00,89,-1,true,'test002');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(7,20000.00,100.00,92,888,false,'V1');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(8,49001.01,85.00,72,20,false,'test001');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(9,5890.02,99.12,85,-101,true,'V2');
insert into root.sg.d1(time,s1,s2,s3,s4,s5,s6) values(10,11000.11,87.1,0,111,false,'V1');

--4. 数据分析
select s1, s2 from root.sg.d1;
select s1, s2, case when s1 >= 10000 and s1 < 50000 and s2 >= 90 and s2 <= 200 then "perfect~~~" when s1 >= 5000 and s1 < 10000 or s2 >80 and s2 < 90 then "very well~~~" when s1 < 5000 or s2<= 80 then "just so so~~~" end as `Evaluation Results` from root.sg.d1;

--5. 查询结果转换
select s6, case when s6 like "%cc%" then "has cc" when s6 like "%test%" then "has test" when s6 like "%1" then "has 1" else "no any more" end as `Evaluation Results` from root.sg.d1;

--6. 结合聚合函数
--6.1 CASE表达式外部使用聚合函数
select s3 from root.sg.d1;
select count(case when s3 <= 70 then 1 end) as `(-∞, 70]`, count(case when s3 > 70 and s3 <= 80 then 1 end) as `(70,80]`, count(case when s3 > 80 and s3 <= 90 then 1 end) as `(80,90]`, count
(case when s3 > 90 then 1 end) as `(90,+∞]` from root.sg.d1;
select sum(case when s3 <= 70 then 1 end) as `(-∞, 70]`, sum(case when s3 > 70 and s3 <= 80 then 1 end) as `(70,80]`, sum(case when s3 > 80 and s3 <= 90 then 1 end) as `(80,90]`, sum
(case when s3 > 90 then 1 end) as `(90,+∞]` from root.sg.d1;
select s4 from root.sg.d1;
select MAX_VALUE(case when s4 <= 20 then 0 end) as `(-∞, 20]`, MAX_VALUE(case when s4 > 20 and s4 <= 500 then 0 end) as `(20,500]`, MAX_VALUE(case when s4 > 500 and s4 <= 1000 then 0 end) as `(500,1000]`, MAX_VALUE(case when s4 > 1000 then 0 end) as `(1000,+∞]` from root.sg.d1;
select MAX_VALUE(case when s4 <= 20 then -1 end) as `(-∞, 20]`, MAX_VALUE(case when s4 > 20 and s4 <= 500 then -1 end) as `(20,500]`, MAX_VALUE(case when s4 > 500 and s4 <= 1000 then -1 end) as `(500,1000]`, MAX_VALUE(case when s4 > 1000 then -1 end) as `(1000,+∞]` from root.sg.d1;
select MAX_TIME(case when s4 <= 20 then "yes" end) as `(-∞, 20]`, MAX_TIME(case when s4 > 20 and s4 <= 500 then "yes" end) as `(20,500]`, MAX_TIME(case when s4 > 500 and s4 <= 1000 then "yes" end) as `(500,1000]`, MAX_TIME(case when s4 > 1000 then "yes" end) as `(1000,+∞]` from root.sg.d1;
select LAST_VALUE(case when s4 <= 20 then "low" end) as `result 1`, LAST_VALUE(case when s4 > 20 and s4 <= 500 then "medium" end) as `result 2`,LAST_VALUE(case when s4 > 500 and s4 <= 1000 then "high" end) as `result 3` from root.sg.d1;
--6.2 CASE表达式内部使用聚合函数
select case when s3 > 85 then avg(s3) else last_value(s3) end from root.sg.d1;
<<SQLSTATE;

--7. 简化CASE表达式
select s1, case s1 when 20000 then "Gold Medal" when 10000 then "Silver Medal" else "missed it" end from root.sg.d1;
select s2, case s2 when 100 then "A" when 90 then "B" when 85 then "C" else "Others" end from root.sg.d1;

--8. 类型校验
--8.1 BOOLEAN类型与其他类型共存
select s3, case s3 when 100 then true when 0 then 2 end from root.sg.d1;
<<SQLSTATE;
--8.2 仅有BOOLEAN数据类型
select s3, case s3 when 100 then true when 0 then false end as `result` from root.sg.d1;
--8.3 TEXT类型与其他数据类型共存
select s2, case s2 when 100 then 100 when 50 then "out" end from root.sg.d1;
<<SQLSTATE;
--8.4 仅有TEXT数据类型
select s2, case s2 when 100 then "pass" when 50 then "out" end as `result` from root.sg.d1;
--8.5 数据类型共存
select s4, case s4 when 500 then 500 when 111 then 111.01 when 20 then 2000000000000000000 when -101 then -101.1111111111111111111111111111111111111111111 end as `result` from root.sg.d1;


--9. 同一表达式在case when 子句里和子句外
select
	202 + ((time - 1) + (202-79.1) / 5.039) as no_bug,
	case when true then 202 + ((time - 1) + (202-79.1) / 5.039) end as bug_again,
	s4 
from root.sg.d1;

--10. 清理环境
connect root/TimechoDB@2021;
delete database root.**;
<<NULL;