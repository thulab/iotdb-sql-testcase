
connect root/TimechoDB@2021;
-- 1. 乐观策略
-- 1.1 before insert, throw exception
-- 1.2 before insert, return false
-- 1.3 before insert, return true
-- 1.4 after insert, throw exception
-- 1.5 after insert, return false
-- 1.6 after insert, return true
-- 2. 悲观策略
-- 2.1 before insert, throw exception
-- 2.2 before insert, return false
-- 2.3 before insert, return true
-- 2.4 after insert, throw exception
-- 2.5 after insert, return false
-- 2.6 after insert, return true

-- 清理
drop database root.**;<<NULL;
sleep 2000;

-- 1. 乐观策略
-- 1.1 before insert, throw connection exception
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `Opti-before-insert-exception`
before INSERT
ON root.triggertest.d1.s1
AS 'com.timecho.test.FireThrowExceptionOpti';

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;

-- 2条
select * from root.triggertest.d1;

insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (3, 32);<<SQLSTATE;
-- 3条
select * from root.triggertest.d1;

drop trigger `Opti-before-insert-exception`;
delete timeseries root.**;


-- 1.2 before insert, return false
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `Opti-before-insert-false`
before INSERT
ON root.triggertest.d1.s1
AS 'com.timecho.test.FireReturnFalseOpti';

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;

-- 2条
select * from root.triggertest.d1;

insert into root.triggertest.d1 (time, s1) values (2, 23);<<SQLSTATE;
-- 2条
select * from root.triggertest.d1;

drop trigger `Opti-before-insert-false`;
delete timeseries root.**;



-- 1.3 before insert, return true
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `opi-beforeInsert-true`
before INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip' = "127.0.0.1",
  'lo' = '10',
  'hi' = '15.5'
);

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);
insert into root.triggertest.d1 (time, s1) values (2, 22);

-- 2条
select * from root.triggertest.d1;
-- 1条
select count(*) from root.ln.alerting;

insert into root.triggertest.d1 (time, s1) values (3, 25);
-- 3条
select * from root.triggertest.d1;
-- 2条
select count(*) from root.ln.alerting;

drop trigger `opi-beforeInsert-true`;
delete timeseries root.**;



-- 1.4 after insert throw connection exception
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `opti-afterInsert-exception`
after INSERT
ON root.triggertest.d1.s1
AS 'com.timecho.test.FireThrowExceptionOpti';

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;

-- 2条 
select * from root.triggertest.d1;

insert into root.triggertest.d1 (time, s1) values (2, 22.24);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (3, 32);<<SQLSTATE;
-- 3条
select * from root.triggertest.d1;

drop trigger `opti-afterInsert-exception`;
delete timeseries root.**;



-- 1.5 after insert, return false
delete timeseries root.**;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `opti-afterInsert-false`
after INSERT
ON root.triggertest.d1.s1
AS 'com.timecho.test.FireReturnFalseOpti' ;

show triggers;

insert into root.triggertest.d1 (time, s1) values (1, 5);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;

-- 2条
select * from root.triggertest.d1;

insert into root.triggertest.d1 (time, s1) values (2, 8.8888);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (4, 18.8888);<<SQLSTATE;

-- 3条
select * from root.triggertest.d1;


drop trigger `opti-afterInsert-false`;
delete timeseries root.**;


-- 2.1 悲观策略 before insert, throw exception
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `pess-beforeInsert-exception`
before INSERT
ON root.triggertest.d1.s1
AS 'com.timecho.test.FireThrowExceptionPess';

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;

-- 0条 
select * from root.triggertest.d1;

insert into root.triggertest.d1 (time, s1) values (2, 22.234);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (3, 32);<<SQLSTATE;
-- 0条
select * from root.triggertest.d1;

drop trigger `pess-beforeInsert-exception`;
delete timeseries root.**;

-- 2.2 before insert, return false
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `pess-beforeInsert-false`
before INSERT
ON root.triggertest.d1.s1
AS 'com.timecho.test.FireReturnFalsePess';

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;

-- 0条
select * from root.triggertest.d1;

insert into root.triggertest.d1 (time, s1) values (2, 23);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (3, 220);<<SQLSTATE;
-- 0条
select * from root.triggertest.d1;

drop trigger `pess-beforeInsert-false`;
delete timeseries root.**;


-- 2.3 before insert, return true
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `pess-beforeInsert-true`
before INSERT
ON root.triggertest.d1.s1
AS 'TriggerTest'
WITH (
  'remote_ip' = "127.0.0.1",
  'ts_type' = 'double',
  'trig_name' = 'pess-beforeInsert-true'
);

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);
insert into root.triggertest.d1 (time, s1) values (2, 422);

-- 2条
select * from root.triggertest.d1;
-- 1条
select count(*) from root.target.alerting; 

insert into root.triggertest.d1 (time, s1) values (2, 8.8888);
insert into root.triggertest.d1 (time, s1) values (4, 618.8888);

-- 3条
select * from root.triggertest.d1;
-- 2条
select count(*) from root.target.alerting;

delete timeseries root.**;
drop trigger `pess-beforeInsert-true`;


-- 2.4 悲观策略 after insert, throw exception
delete storage root.**;<<NULL;
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `pess-afterInsert-exception`
after INSERT
ON root.triggertest.d1.s1
AS 'com.timecho.test.FireThrowExceptionPess';

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;

-- 2条
select * from root.triggertest.d1;

insert into root.triggertest.d1 (time, s1) values (2, 22.33);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (3, 220);<<SQLSTATE;
-- 3条
select * from root.triggertest.d1;

drop trigger `pess-afterInsert-exception`;
delete timeseries root.**;
sleep 2000;

-- 2.5 悲观策略 after insert return false
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `pess-afterInsert-false`
after INSERT
ON root.triggertest.d1.s1
AS 'com.timecho.test.FireReturnFalsePess';

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (2, 22);<<SQLSTATE;

-- 2条
select * from root.triggertest.d1;

insert into root.triggertest.d1 (time, s1) values (2, 22.33);<<SQLSTATE;
insert into root.triggertest.d1 (time, s1) values (3, 220);<<SQLSTATE;
-- 3条
select * from root.triggertest.d1;

drop trigger `pess-afterInsert-false`;
delete timeseries root.**;


-- 2.6 悲观策略, after insert, return true
delete timeseries root.**;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `pess-afterInsert-true`
after INSERT
ON root.triggertest.d1.s1
AS 'TriggerTest'
WITH (
  'remote_ip' = "127.0.0.1",
  'ts_type' = 'double',
  'trig_name' = 'pess-afterInsert-true'
);

show triggers;
insert into root.triggertest.d1 (time, s1) values (1, 5);
insert into root.triggertest.d1 (time, s1) values (2, 422);

-- 2条
select * from root.triggertest.d1;
-- 1条
select count(*) from root.target.alerting; 

insert into root.triggertest.d1 (time, s1) values (2, 8.8888);
insert into root.triggertest.d1 (time, s1) values (4, 618.8888);

-- 3条
select * from root.triggertest.d1;
-- 2条
select count(*) from root.target.alerting; 

delete timeseries root.**;
drop trigger `pess-afterInsert-true`;


