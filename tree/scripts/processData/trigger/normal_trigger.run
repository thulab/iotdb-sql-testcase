
connect root/TimechoDB@2021;
// 把自带用例的jar copy到ext/trigger
-- 1. 先创建timeseries, 再创建针对单个timeseries的trigger, 单值insert, 2个key-value
-- 2. 单个timeseries,没有任何device时创建trigger,0个key-value,批量insert
-- 3. 一个device下多个double值,期望每个值都被处理
-- 4. 通配符：针对多个device, key-value 3个
-- 5. 一个device下多个timeseries:单独插入，多值插入
-- 6. 一个device下多个timeseries但仅有一个double
-- 7. 单个timeseries和通配符叠加使用。key-value 单个,key使用双引号
-- 8. 类型不匹配,text类型注册double类型的trigger
-- 9. 最小实现trigger类。同一个trigger类，建立stateful, stateless trigger

drop database root.**;<<NULL;
sleep 2000;

-- 1. 单个timeseries, 2个key-value, 单值insert
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `normal01`
AFTER INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);
-- case 1.1 同名检测
CREATE STATELESS TRIGGER `normal01`
AFTER INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);
<<SQLSTATE;

-- case 1.2 show triggers
show triggers;
-- trigger工作前数据库状态
SHOW DATABASES root.triggertest;
show devices root.triggertest.*;
show timeseries root.triggertest.**;

INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (1, 0);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (2, 2);
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (3, null);
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (4, 6);

INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (5, 8);

INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (6, 10);
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (7, 12);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (8, 15);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (9, 16);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (10, null);

-- 即时查询有时候查不到 sleep一下
sleep 500;
-- trigger工作后数据库变化
SHOW DATABASES;
show devices;
show timeseries;
-- 期望3个结果
select count(*) from root.ln.alerting;
-- 8条
select * from root.triggertest.d1;

-- 清理
-- case 1.3 删除storage 不会删除trigger
delete timeseries root.**;
show triggers;
drop trigger `normal01`;



-- case 2: 没有任何device时创建trigger,0个key-value,批量insert
-- trigger 创建前状态
show triggers;
show timeseries root.**;

-- 名称case insensitive, 创建trigger在创建timeseries之前
CREATE STATELESS TRIGGER `normal02`
AFTER INSERT
ON root.triggertest.d1.s2
AS 'org.example.DoubleValueMonitor'
with (
  'remote_ip'='127.0.0.1'
);

show triggers;
CREATE TIMESERIES root.triggertest.d1.s2 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;

show timeseries root.**;
INSERT INTO root.triggertest.d1(timestamp, s2) VALUES (6, 10),(7,12),(1,88),(8,14),(9,160),(10,null),(11,58),(2,67.345);
<<SQLSTATE;
sleep 500;
-- 4条
select count(*) from root.ln.alerting;
-- 7条
select * from root.triggertest.d1;
show timeseries root.**;
-- 清理
drop trigger `normal02`;
delete timeseries root.**;




-- 3. 一个device下多个double值,期望每个值都被处理
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;
CREATE TIMESERIES root.triggertest.d1.s2 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `multi.double`
AFTER INSERT
ON root.triggertest.d1.*
AS 'org.example.DoubleValueMonitor'
WITH (
  "remote_ip"="127.0.0.1",
  'lo' = '10',
  'hi' = '15.5'
);

show triggers;

insert into root.triggertest.d1 (time, s1, s2) values (1, 4, 21);
<<SQLSTATE;
insert into root.triggertest.d1 (time, s1, s2) values (2, 11, 1);
<<SQLSTATE;
insert into root.triggertest.d1 (time, s1, s2) values (3, 8, 2);
insert into root.triggertest.d1 (time, s1, s2) values (4, 15.6, 210);
<<SQLSTATE;
flush;
sleep 500;
-- 期望4个值
select count(*) from root.ln.alerting;
-- 4条
select * from root.triggertest.d1;
-- 清理
drop trigger `multi.double`;
delete timeseries root.**;



-- 4. 通配符：针对多个device, key-value 3个
delete timeseries root.**;<<NULL;
CREATE DATABASE root.triggertest;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `wildcard-multi-device`
AFTER INSERT
ON root.triggertest.**
AS 'org.example.DoubleValueMonitor'
WITH (
  hi = 16.0,
  remote_ip='127.0.0.1',
  lo = 12
);
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (1, 0),(2, 2),(3, 4),(4, 6),(5, 8),(6, NULL),(7, 12),(8, 14),(9, 16),(10, 18);
<<SQLSTATE;
flush;
sleep 500;
-- 期望3个值
select count(*) from root.ln.alerting;
-- 9
select * from root.triggertest.d1;

CREATE TIMESERIES root.triggertest.d2.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;
CREATE TIMESERIES root.triggertest.d3.s1 WITH DATATYPE=float, ENCODING=PLAIN;

INSERT INTO root.triggertest.d2(timestamp, s1) VALUES (1, 0),(2, 12.33),(3, 4),(4, 6),(5, 18);
<<SQLSTATE;
flush;
sleep 500;
-- 期望5个值
select count(*) from root.ln.alerting;
-- 5
select * from root.triggertest.d2;

INSERT INTO root.triggertest.d3(timestamp, s1) VALUES (1, 0),(2, 12.33),(3, 4),(4, 6),(5, 18);
flush;
sleep 500;
-- 期望5个值
select count(*) from root.ln.alerting;
-- 5
select * from root.triggertest.d3;

-- 清理
drop trigger `wildcard-multi-device`;
delete timeseries root.**;





-- 5. 一个device下多个timeseries:单独插入，多值插入
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;
CREATE TIMESERIES root.triggertest.d1.s2 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `multiTS`
AFTER INSERT
ON root.triggertest.d1.**
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);
show triggers;

insert into root.triggertest.d1(time,s2) values (1, 11.3),(2,10),(3,13.44);
<<SQLSTATE;
flush;
-- 2条
select count(*) from root.ln.alerting;

insert into root.triggertest.d1(time,s1,s2) values (6, 1, 2),(7,10,20),(8,13.44,15.6);
<<SQLSTATE;
flush;
-- 5条
select count(*) from root.ln.alerting;
-- 6
select * from root.triggertest.d1;

CREATE TIMESERIES root.triggertest.d2.s1 WITH DATATYPE=double, ENCODING=PLAIN;
insert into root.triggertest.d2(time, s1) values (1000,29.768),(2000,5.65),(3000,13.45);
-- 3
select * from root.triggertest.d2;
-- 5
select count(*) from root.ln.alerting;

drop trigger `multiTS`;
delete timeseries root.**;



-- 6. 一个device下多个timeseries但仅有一个double
delete timeseries root.**;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=int32, ENCODING=PLAIN;
CREATE TIMESERIES root.triggertest.d1.s2 WITH DATATYPE=double, ENCODING=PLAIN;

CREATE STATELESS TRIGGER wildcard_1_sensor
AFTER INSERT
ON root.triggertest.d1.**
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);
show triggers;

insert into root.triggertest.d1(time,s1,s2) values (6, 1, 2),(7,10,20),(8,13, 15.6);
<<SQLSTATE;
flush;
-- 2条
select count(*) from root.ln.alerting;
-- 3
select * from root.triggertest.d1;

insert into root.triggertest.d1(time,s2) values (6, 11.3),(2,10),(3,19),(10,3);
<<SQLSTATE;
flush;
-- 4条
select count(*) from root.ln.alerting;
-- 6
select * from root.triggertest.d1;

CREATE TIMESERIES root.triggertest.d2.s1 WITH DATATYPE=double, ENCODING=PLAIN;
insert into root.triggertest.d2(time, s1) values (1000,29.768),(2000,5.65),(3000,13.45);
flush;
-- 6
select * from root.triggertest.d1;
-- 4条
select count(*) from root.ln.alerting;

drop trigger `wildcard_1_sensor`;
delete timeseries root.**;




-- 7. key-value 单个,key 双引号, 单个timeseries和通配符trigger叠加测试
delete timeseries root.**;<<NULL;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `alert01`
AFTER INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  "lo" = '5'
);

INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (1, 0);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (2, 2);
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (3, 4);
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (4, 6);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (5, 8);
<<SQLSTATE;
sleep 500;
-- 2条
select count(*) from root.ln.alerting;
-- 5
select * from root.triggertest.d1;

CREATE STATELESS TRIGGER `alert02`
before INSERT
ON root.triggertest.d1.*
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  hi = 80
);

CREATE TIMESERIES root.triggertest.d1.s2 WITH DATATYPE=DOUBLE, ENCODING=PLAIN;

INSERT INTO root.triggertest.d1(timestamp, s1, s2) VALUES (6,4,5.00000000000000000000000000001);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1, s2) VALUES (7,8,4.567);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1, s2) VALUES (8,10,18);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1, s2) VALUES (9,20,1.8);
<<SQLSTATE;
INSERT INTO root.triggertest.d1(timestamp, s1, s2) VALUES (10,120,80.00000000000000000000123);
<<SQLSTATE;
-- 即时查询有时候查不到 sleep一下
sleep 500;
-- 期望10个值: 不包括5.00000000000000000000000000001
select count(*) from root.ln.alerting;
-- 10
select * from root.triggertest.d1;

-- 清理
drop trigger `alert01`;
drop trigger `alert02`;
delete timeseries root.**;


 
-- 8. 类型不匹配,text类型注册double类型的trigger
delete timeseries root.**;<<NULL;
CREATE TIMESERIES root.triggertest.d1.text1 WITH DATATYPE=text, ENCODING=PLAIN;

CREATE STATELESS TRIGGER `TypeNotTheSame`
AFTER INSERT
ON root.triggertest.d1.text1
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);

show triggers;

insert into root.triggertest.d1 (time, text1) values (1, 'tomy');
<<SQLSTATE;
insert into root.triggertest.d1 (time, text1) values (2, 'localpath');
insert into root.triggertest.d1 (time, text1) values (3, 'prefix');
insert into root.triggertest.d1 (time, text1) values (4, 'iotdb');
-- 0
select count(*) from root.ln.alerting;
-- 4
select * from root.triggertest.d1;

drop trigger `TypeNotTheSame`;


-- 9. 最小实现trigger类。同一个trigger类，建立stateful, stateless trigger
CREATE STATELESS TRIGGER `min_class`
AFTER INSERT
ON root.triggertest.d1.*
AS 'com.timecho.test.EmptyTrigger';


CREATE STATEful TRIGGER `min_class_stateful`
before INSERT
ON root.triggertest.d1.*
AS 'com.timecho.test.EmptyTrigger';


insert into root.triggertest.d1 (time, text1) values (7,'could');
select * from root.triggertest.d1;

drop trigger min_class;
drop trigger min_class_stateful;

delete timeseries root.**;

