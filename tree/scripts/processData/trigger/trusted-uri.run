connect root/TimechoDB@2021;

drop database root.**;<<NULL;


// 1. trusted_uri_pattern=file://
set configuration "trusted_uri_pattern"='file://.*';
sleep 5000;

-- 1.1 use jar in ext
create database root.triggertest;
CREATE TIMESERIES root.triggertest.d1.s1 WITH DATATYPE=double, ENCODING=PLAIN;

show triggers;

CREATE STATELESS TRIGGER local_ext
AFTER INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);

show triggers;

INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (6, 10),(7,12),(8,14),(9,160),(10,null),(11,58);
select * from root.triggertest.d1;
select count(*) from root.ln.alerting;

drop trigger local_ext;
delete timeseries root.triggertest.d1.s1;
delete timeseries root.ln.alerting.**;

-- 1.2 use http
CREATE STATEful TRIGGER `http` after INSERT ON root.triggertest.d1.s1 AS 'org.stateful.test.http.StatefulTriggerTest' 
Using uri 'http://127.0.0.1:8085/stateful-test-for-http-0.14-SNAPSHOT.jar' WITH (   'HOST'= '127.0.0.1',   'data_type'= 'double',   'standard_value' = 1,   'trig_name' = 'http' );
<<SQLSTATE;

show triggers;
drop trigger http;<<NULL;

-- 1.3 use file uri
CREATE STATELESS TRIGGER `useFile`
before INSERT
ON root.triggertest.d1
AS 'org.example.DoubleValueMonitor'
USING URI 'file:///data/nginx/double-value-monitor-0.14-SNAPSHOT.jar'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);

show triggers;

INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (6, 10),(7,12),(8,14),(9,160),(10,null),(11,58);
select * from root.triggertest.d1;
select count(*) from root.ln.alerting;

drop trigger useFile;
drop timeseries root.triggertest.d1.s1;
delete timeseries root.ln.alerting.**;


-- 1.4 use local path without file://
CREATE STATELESS TRIGGER `useLocalFile`
before INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
USING URI '/data/nginx/double-value-monitor-0.14-SNAPSHOT.jar'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);
<<SQLSTATE;

show triggers;
drop trigger useLocalFile;<<NULL;

-- 1.5 use local path but invalid
CREATE STATELESS TRIGGER `invalid_file1`
before INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
USING URI 'file://data/nginx/double-value-monitor-0.14-SNAPSHOT.jar'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);
<<SQLSTATE;

show triggers;
drop trigger invalid_file1;<<NULL;

-- 1.6 use local path but invalid
CREATE STATELESS TRIGGER `invalid_file2`
before INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
USING URI 'file:////data/nginx/double-value-monitor-0.14-SNAPSHOT.jar'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);

show triggers;
drop trigger invalid_file2; <<NULL;








//2. trusted_uri_pattern=http://
set configuration "trusted_uri_pattern"='http://.*';

-- 2.1 http
CREATE STATEful TRIGGER `http` after INSERT ON root.triggertest.d1.s1 AS 'org.stateful.test.http.StatefulTriggerTest'
Using uri 'http://127.0.0.1:8085/stateful-test-for-http-0.14-SNAPSHOT.jar' WITH (   'HOST'= '127.0.0.1',   'data_type'= 'double',   'standard_value' = 1,   'trig_name' = 'http' );

show triggers;

INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (6, 10),(7,12),(8,14),(9,160),(10,null),(11,58);
select * from root.triggertest.d1;
select count(*) from root.ln.alerting;

drop trigger http;
delete timeseries root.triggertest.d1.s1;
delete timeseries root.ln.alerting.**;

-- 2.2 file
CREATE STATELESS TRIGGER `useFile`
before INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
USING URI 'file:///data/nginx/double-value-monitor-0.14-SNAPSHOT.jar'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);
<<SQLSTATE;

show triggers;


-- 2.3 no path
CREATE STATELESS TRIGGER local_ext
AFTER INSERT
ON root.triggertest.d1.s1
AS 'org.example.DoubleValueMonitor'
WITH (
  'remote_ip'='127.0.0.1',
  'lo' = '10',
  'hi' = '15.5'
);

show triggers;
INSERT INTO root.triggertest.d1(timestamp, s1) VALUES (6, 10),(7,12),(8,14),(9,160),(10,null),(11,58);
select * from root.triggertest.d1;
select count(*) from root.ln.alerting;

drop trigger local_ext;
delete timeseries root.triggertest.d1.s1;
delete timeseries root.ln.alerting.**;

drop database root.**;
