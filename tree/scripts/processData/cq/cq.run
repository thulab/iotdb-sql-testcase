/*
connect root/TimechoDB@2021;
--清理环境
delete DATABASE root.**;
<<NULL;
DROP CQ cq1;
<<NULL;
DROP CQ cq2;
<<NULL;
DROP CQ cq3;
<<NULL;
DROP CQ cq4;
<<NULL;
DROP CQ cq5;
<<NULL;
DROP CQ cq6;
<<NULL;
DROP CQ cq7;
<<NULL;
DROP CQ cq8;
<<NULL;


//一、分别执行创建CQ、查看CQ、删除CQ
--0.清理环境
delete DATABASE root.**;
<<NULL;
DROP CQ cq1;
<<NULL;
DROP CQ cq2;
<<NULL;
DROP CQ cq3;
<<NULL;
DROP CQ cq4;
<<NULL;
DROP CQ cq5;
<<NULL;
DROP CQ cq6;
<<NULL;
DROP CQ cq7;
<<NULL;
DROP CQ cq8;
<<NULL;

--1.创建CQ
--1.0 正常创建CQ，并查看时间序列
create timeseries root.ln.wf01.temperature with datatype=FLOAT,encoding=RLE;
CREATE CONTINUOUS QUERY cq1 BEGIN SELECT max_value(temperature) INTO root.ln_cq.${2}(temperature_max) FROM root.ln.*.*  GROUP BY(10s) END;
CREATE CONTINUOUS QUERY cq2 RESAMPLE EVERY 20s BEGIN SELECT avg(temperature) INTO root.ln_cq.${2}(temperature_avg) FROM root.ln.*.* GROUP BY(10s), level=2 END;
CREATE CONTINUOUS QUERY cq3 RESAMPLE EVERY 20s BEGIN SELECT first_value(temperature) INTO root.ln_cq.${2}(temperature_first_value) FROM root.ln.*.* GROUP BY(10s), level=2 END;
CREATE CQ cq4 RESAMPLE EVERY 20s BOUNDARY 0 BEGIN SELECT max_time(temperature) INTO root.ln_cq.${2}(temperature_max_time) FROM root.ln.*.* GROUP BY(10s) END;
--1.1 where子句出现任何时间过滤条件校验
CREATE CONTINUOUS QUERY cq5 RESAMPLE EVERY 20s RANGE 40s, 20s BEGIN SELECT max_value(temperature) INTO root.ln.wf02.wt02(temperature_max) FROM root.ln.*.* where time >= now()-10s END;
<<SQLSTATE;
--1.2 Group by time指定校验
CREATE CONTINUOUS QUERY cq6 RESAMPLE EVERY 20s RANGE 40s, 20s BEGIN SELECT sum(temperature) INTO root.ln.wf03.wt03(temperature_sum) FROM root.ln.*.* GROUP BY([0,50), 20s) END;
<<SQLSTATE;
--1.3 分别对EVERY和Group By Time子句校验
CREATE CONTINUOUS QUERY cq7 RESAMPLE RANGE 40s, 20s BEGIN SELECT count(temperature) INTO root.ln.wf04.wt04(temperature_count) FROM root.ln.*.* where temperature >= 15 END;
<<SQLSTATE;
CREATE CONTINUOUS QUERY cq8 RESAMPLE EVERY 20s RANGE 40s, 20s BEGIN SELECT last_value(temperature) INTO root.ln.wf05.wt05(temperature_last_value) FROM root.ln.*.* END;
show timeseries;
count timeseries;

--2.查看CQ
SHOW CONTINUOUS QUERIES;
SHOW CQS;


--3.删除已有的CQ
DROP CONTINUOUS QUERY cq1;
DROP CQ cq2;
DROP CONTINUOUS QUERY cq3;
DROP CQ cq4;
DROP CQ cq5;
<<SQLSTATE;

--4.查看存在的CQ列表
SHOW CONTINUOUS QUERIES;
SHOW CQS;

--5.清理环境
delete DATABASE root.**;
<<NULL;
DROP CQ cq1;
<<NULL;
DROP CQ cq2;
<<NULL;
DROP CQ cq3;
<<NULL;
DROP CQ cq4;
<<NULL;
DROP CQ cq5;
<<NULL;
DROP CQ cq6;
<<NULL;
DROP CQ cq7;
<<NULL;
DROP CQ cq8;
<<NULL;


//二、CQ连续查询效果验证
--0.清理环境
delete DATABASE root.**;
<<NULL;
DROP CQ cq1;
<<NULL;
DROP CQ cq2;
<<NULL;
DROP CQ cq3;
<<NULL;
DROP CQ cq4;
<<NULL;
DROP CQ cq5;
<<NULL;

--1.创建时间序列和CQ
--1.1 创建时间序列
create timeseries root.ln.wf01.status with datatype=BOOLEAN,encoding=PLAIN;
create timeseries root.ln.wf01.temperature with datatype=FLOAT,encoding=RLE;
--1.2 创建CQ
CREATE CONTINUOUS QUERY cq1 RESAMPLE EVERY 10s BEGIN SELECT max_value(temperature) INTO root.ln.wf01(temperature_max) FROM root.ln.wf01 GROUP BY(5s) END;
--1.3 使用RANGE子句中的start_time_offset参数指定连续查询每次执行的时间窗口的开始时间偏移，如果没有指定，默认值等于EVERY参数。
CREATE CONTINUOUS QUERY cq2 RESAMPLE RANGE 10s BEGIN SELECT avg(temperature) INTO root.ln.wf01(temperature_avg) FROM root.ln.wf01 GROUP BY(5s) END;
--1.4 同时配置连续查询执行的周期性间隔和时间窗口大小
CREATE CONTINUOUS QUERY cq3 RESAMPLE EVERY 10s RANGE 20s BEGIN SELECT min_value(temperature) INTO root.ln.wf01(temperature_min) FROM root.ln.wf01 GROUP BY(3s) FILL(100.0) END;
--1.5 配置连续查询每次查询执行时间窗口的结束时间
CREATE CONTINUOUS QUERY cq4 RESAMPLE EVERY 10s RANGE 30s, 10s BEGIN SELECT sum(temperature) INTO root.ln.wf01(temperature_sum) FROM root.ln.wf01 GROUP BY(10s) FILL(100.0) END;
--1.6 没有GROUP BY TIME子句的连续查询
CREATE CONTINUOUS QUERY cq5 RESAMPLE EVERY 10s BEGIN SELECT temperature + 1 INTO root.ln.wf01(temperature_add) FROM root.ln.wf01 align by device END;

--2.查看设备和时间序列
sleep 5000;
show devices;
show timeseries;
count timeseries;

--3.插入数据并执行CQ查询
--3.1 插入数据
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.0);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.1);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.2);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.3);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.4);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.5);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.6);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.7);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.8);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,22.9);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.0);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.1);
sleep 1000;
--3.2 查看时间序列和CQ查询
sleep 10000;
show timeseries;
select count(temperature_max) from root.ln.wf01;
select count(temperature_avg) from root.ln.wf01;
select count(temperature_min) from root.ln.wf01;
select count(temperature_sum) from root.ln.wf01;
select count(temperature_add) from root.ln.wf01;
--3.3 继续插入数据
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.2);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.3);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.4);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.5);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.6);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.7);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.8);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,23.9);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,24.0);
sleep 1000;
insert into root.ln.wf01(time,status,temperature) values(now(),1,24.1);
sleep 1000;
--3.4再次查看时间序列和CQ查询
sleep 10000;
show timeseries;
select count(temperature_max) from root.ln.wf01;
select count(temperature_avg) from root.ln.wf01;
select count(temperature_min) from root.ln.wf01;
select count(temperature_sum) from root.ln.wf01;
select count(temperature_add) from root.ln.wf01;
select count(*) from root.ln.wf01;
show timeseries;

--4.删除CQ
DROP CQ cq1;
DROP CONTINUOUS QUERY cq2;

--5.清理环境
delete DATABASE root.**;
<<NULL;
DROP CQ cq1;
<<NULL;
DROP CQ cq2;
<<NULL;
DROP CQ cq3;
<<NULL;
DROP CQ cq4;
<<NULL;
DROP CQ cq5;
<<NULL;



--清理环境
delete DATABASE root.**;
<<NULL;
DROP CQ cq1;
<<NULL;
DROP CQ cq2;
<<NULL;
DROP CQ cq3;
<<NULL;
DROP CQ cq4;
<<NULL;
DROP CQ cq5;
<<NULL;
DROP CQ cq6;
<<NULL;
DROP CQ cq7;
<<NULL;
DROP CQ cq8;
<<NULL;
*/
